

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Mon Dec 14 09:15:58 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34  0000                     
    35                           ; Version 2.30
    36                           ; Generated 26/08/2020 GMT
    37                           ; 
    38                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	nvBANK0
    72  0000A8                     __pnvBANK0:
    73                           	callstack 0
    74  0000A8                     _cod1:
    75                           	callstack 0
    76  0000A8                     	ds	1
    77  0000                     _LATDbits	set	3980
    78  0000                     _TRISD	set	3989
    79  0000                     _PORTD	set	3971
    80  0000                     _TRISDbits	set	3989
    81  0000                     _PORTCbits	set	3970
    82  0000                     _TRISC	set	3988
    83  0000                     _ADCON1bits	set	4033
    84                           
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	callstack 0
    88  000800  00                 	db	0
    89  000801                     STR_6:
    90  000801  2A                 	db	42
    91  000802  2A                 	db	42
    92  000803  2A                 	db	42
    93  000804  41                 	db	65	;'A'
    94  000805  55                 	db	85	;'U'
    95  000806  4C                 	db	76	;'L'
    96  000807  41                 	db	65	;'A'
    97  000808  20                 	db	32
    98  000809  4C                 	db	76	;'L'
    99  00080A  4C                 	db	76	;'L'
   100  00080B  45                 	db	69	;'E'
   101  00080C  4E                 	db	78	;'N'
   102  00080D  41                 	db	65	;'A'
   103  00080E  2A                 	db	42
   104  00080F  2A                 	db	42
   105  000810  2A                 	db	42
   106  000811  00                 	db	0
   107  000812                     STR_1:
   108  000812  52                 	db	82	;'R'
   109  000813  46                 	db	70	;'F'
   110  000814  49                 	db	73	;'I'
   111  000815  44                 	db	68	;'D'
   112  000816  20                 	db	32
   113  000817  4C                 	db	76	;'L'
   114  000818  45                 	db	69	;'E'
   115  000819  43                 	db	67	;'C'
   116  00081A  54                 	db	84	;'T'
   117  00081B  55                 	db	85	;'U'
   118  00081C  52                 	db	82	;'R'
   119  00081D  41                 	db	65	;'A'
   120  00081E  20                 	db	32
   121  00081F  54                 	db	84	;'T'
   122  000820  41                 	db	65	;'A'
   123  000821  47                 	db	71	;'G'
   124  000822  00                 	db	0
   125  000823                     STR_4:
   126  000823  53                 	db	83	;'S'
   127  000824  61                 	db	97	;'a'
   128  000825  6C                 	db	108	;'l'
   129  000826  69                 	db	105	;'i'
   130  000827  6F                 	db	111	;'o'
   131  000828  3A                 	db	58	;':'
   132  000829  20                 	db	32
   133  00082A  25                 	db	37
   134  00082B  64                 	db	100	;'d'
   135  00082C  20                 	db	32
   136  00082D  20                 	db	32
   137  00082E  00                 	db	0
   138  00082F                     STR_2:
   139  00082F  45                 	db	69	;'E'
   140  000830  6E                 	db	110	;'n'
   141  000831  74                 	db	116	;'t'
   142  000832  72                 	db	114	;'r'
   143  000833  6F                 	db	111	;'o'
   144  000834  3A                 	db	58	;':'
   145  000835  20                 	db	32
   146  000836  25                 	db	37
   147  000837  64                 	db	100	;'d'
   148  000838  20                 	db	32
   149  000839  20                 	db	32
   150  00083A  00                 	db	0
   151  00083B                     STR_3:
   152  00083B  23                 	db	35
   153  00083C  20                 	db	32
   154  00083D  25                 	db	37
   155  00083E  64                 	db	100	;'d'
   156  00083F  20                 	db	32
   157  000840  00                 	db	0
   158  000841  00                 	db	0	; dummy byte at the end
   159  0000                     
   160                           ; #config settings
   161                           
   162                           	psect	cinit
   163  00172E                     __pcinit:
   164                           	callstack 0
   165  00172E                     start_initialization:
   166                           	callstack 0
   167  00172E                     __initialization:
   168                           	callstack 0
   169                           
   170                           ; Clear objects allocated to BANK0 (62 bytes)
   171  00172E  EE00  F060         	lfsr	0,__pbssBANK0
   172  001732  0E3E               	movlw	62
   173  001734                     clear_0:
   174  001734  6AEE               	clrf	postinc0,c
   175  001736  06E8               	decf	wreg,f,c
   176  001738  E1FD               	bnz	clear_0
   177  00173A                     end_of_initialization:
   178                           	callstack 0
   179  00173A                     __end_of__initialization:
   180                           	callstack 0
   181  00173A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   182  00173C  6EF8               	movwf	tblptru,c
   183  00173E  0100               	movlb	0
   184  001740  EF92  F005         	goto	_main	;jump to C main() function
   185                           
   186                           	psect	bssBANK0
   187  000060                     __pbssBANK0:
   188                           	callstack 0
   189  000060                     _nout:
   190                           	callstack 0
   191  000060                     	ds	2
   192  000062                     _width:
   193                           	callstack 0
   194  000062                     	ds	2
   195  000064                     _prec:
   196                           	callstack 0
   197  000064                     	ds	2
   198  000066                     _flags:
   199                           	callstack 0
   200  000066                     	ds	2
   201  000068                     _i:
   202                           	callstack 0
   203  000068                     	ds	2
   204  00006A                     _dbuf:
   205                           	callstack 0
   206  00006A                     	ds	32
   207  00008A                     _cont:
   208                           	callstack 0
   209  00008A                     	ds	10
   210  000094                     _texto:
   211                           	callstack 0
   212  000094                     	ds	10
   213                           
   214                           	psect	cstackBANK0
   215  00009E                     __pcstackBANK0:
   216                           	callstack 0
   217  00009E                     	ds	2
   218  0000A0                     sprintf@ap:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x2
   222  0000A0                     	ds	2
   223  0000A2                     sprintf@f:
   224                           	callstack 0
   225                           
   226                           ; 6 bytes @ 0x4
   227  0000A2                     	ds	6
   228                           
   229                           	psect	cstackCOMRAM
   230  000001                     __pcstackCOMRAM:
   231                           	callstack 0
   232  000001                     ??_LCD_Comando:
   233  000001                     ??_LCD_Data:
   234  000001                     ?_strlen:
   235                           	callstack 0
   236  000001                     ?___aodiv:
   237                           	callstack 0
   238  000001                     ?___aomod:
   239                           	callstack 0
   240  000001                     fputc@c:
   241                           	callstack 0
   242  000001                     strlen@s:
   243                           	callstack 0
   244  000001                     ___aodiv@dividend:
   245                           	callstack 0
   246  000001                     ___aomod@dividend:
   247                           	callstack 0
   248                           
   249                           ; 8 bytes @ 0x0
   250  000001                     	ds	1
   251  000002                     LCD_Comando@cmd:
   252                           	callstack 0
   253  000002                     LCD_Data@data:
   254                           	callstack 0
   255                           
   256                           ; 1 bytes @ 0x1
   257  000002                     	ds	1
   258  000003                     ??_LCD_Init:
   259  000003                     LCD_gotoXY@x:
   260                           	callstack 0
   261  000003                     LCD_Cadena@dato:
   262                           	callstack 0
   263  000003                     fputc@fp:
   264                           	callstack 0
   265  000003                     strlen@a:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x2
   269  000003                     	ds	2
   270  000005                     ??_LCD_Cadena:
   271  000005                     ??_fputc:
   272  000005                     LCD_gotoXY@y:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x4
   276  000005                     	ds	2
   277  000007                     ??_LCD_gotoXY:
   278                           
   279                           ; 1 bytes @ 0x6
   280  000007                     	ds	2
   281  000009                     ___aodiv@divisor:
   282                           	callstack 0
   283  000009                     ___aomod@divisor:
   284                           	callstack 0
   285                           
   286                           ; 8 bytes @ 0x8
   287  000009                     	ds	1
   288  00000A                     fputs@s:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x9
   292  00000A                     	ds	2
   293  00000C                     fputs@fp:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0xB
   297  00000C                     	ds	2
   298  00000E                     fputs@c:
   299                           	callstack 0
   300                           
   301                           ; 1 bytes @ 0xD
   302  00000E                     	ds	1
   303  00000F                     fputs@i:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0xE
   307  00000F                     	ds	2
   308  000011                     ?_pad:
   309                           	callstack 0
   310  000011                     ___aodiv@counter:
   311                           	callstack 0
   312  000011                     ___aomod@counter:
   313                           	callstack 0
   314  000011                     pad@fp:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x10
   318  000011                     	ds	1
   319  000012                     ___aodiv@sign:
   320                           	callstack 0
   321  000012                     ___aomod@sign:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x11
   325  000012                     	ds	1
   326  000013                     ?_abs:
   327                           	callstack 0
   328  000013                     pad@buf:
   329                           	callstack 0
   330  000013                     abs@a:
   331                           	callstack 0
   332  000013                     ___aodiv@quotient:
   333                           	callstack 0
   334                           
   335                           ; 8 bytes @ 0x12
   336  000013                     	ds	2
   337  000015                     ??_abs:
   338  000015                     pad@p:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x14
   342  000015                     	ds	2
   343  000017                     ??_pad:
   344                           
   345                           ; 1 bytes @ 0x16
   346  000017                     	ds	1
   347  000018                     pad@i:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x17
   351  000018                     	ds	2
   352  00001A                     pad@w:
   353                           	callstack 0
   354                           
   355                           ; 2 bytes @ 0x19
   356  00001A                     	ds	2
   357  00001C                     ?_dtoa:
   358                           	callstack 0
   359  00001C                     dtoa@fp:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x1B
   363  00001C                     	ds	2
   364  00001E                     dtoa@d:
   365                           	callstack 0
   366                           
   367                           ; 8 bytes @ 0x1D
   368  00001E                     	ds	8
   369  000026                     ??_dtoa:
   370                           
   371                           ; 1 bytes @ 0x25
   372  000026                     	ds	8
   373  00002E                     _dtoa$811:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0x2D
   377  00002E                     	ds	2
   378  000030                     dtoa@p:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x2F
   382  000030                     	ds	2
   383  000032                     dtoa@w:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x31
   387  000032                     	ds	2
   388  000034                     dtoa@s:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x33
   392  000034                     	ds	2
   393  000036                     dtoa@n:
   394                           	callstack 0
   395                           
   396                           ; 8 bytes @ 0x35
   397  000036                     	ds	8
   398  00003E                     dtoa@i:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x3D
   402  00003E                     	ds	2
   403  000040                     ?_vfpfcnvrt:
   404                           	callstack 0
   405  000040                     vfpfcnvrt@fp:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x3F
   409  000040                     	ds	2
   410  000042                     vfpfcnvrt@fmt:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x41
   414  000042                     	ds	2
   415  000044                     vfpfcnvrt@ap:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x43
   419  000044                     	ds	2
   420  000046                     ??_vfpfcnvrt:
   421                           
   422                           ; 1 bytes @ 0x45
   423  000046                     	ds	2
   424  000048                     vfpfcnvrt@ll:
   425                           	callstack 0
   426                           
   427                           ; 8 bytes @ 0x47
   428  000048                     	ds	8
   429  000050                     ?_vfprintf:
   430                           	callstack 0
   431  000050                     vfprintf@fp:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x4F
   435  000050                     	ds	2
   436  000052                     vfprintf@fmt:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x51
   440  000052                     	ds	2
   441  000054                     vfprintf@ap:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x53
   445  000054                     	ds	2
   446  000056                     vfprintf@cfmt:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x55
   450  000056                     	ds	2
   451  000058                     ?_sprintf:
   452                           	callstack 0
   453  000058                     sprintf@s:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x57
   457  000058                     	ds	2
   458  00005A                     sprintf@fmt:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x59
   462  00005A                     	ds	4
   463  00005E                     ??_main:
   464                           
   465                           ; 1 bytes @ 0x5D
   466  00005E                     	ds	2
   467                           
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 36 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   487 ;;      Params:         0       0       0       0       0       0       0       0       0
   488 ;;      Locals:         0       0       0       0       0       0       0       0       0
   489 ;;      Temps:          2       0       0       0       0       0       0       0       0
   490 ;;      Totals:         2       0       0       0       0       0       0       0       0
   491 ;;Total ram usage:        2 bytes
   492 ;; Hardware stack levels required when called:    8
   493 ;; This function calls:
   494 ;;		_InitPort
   495 ;;		_LCD_Cadena
   496 ;;		_LCD_Init
   497 ;;		_LCD_gotoXY
   498 ;;		_sprintf
   499 ;; This function is called by:
   500 ;;		Startup code after reset
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text0
   505  000B24                     __ptext0:
   506                           	callstack 0
   507  000B24                     _main:
   508                           	callstack 23
   509  000B24                     
   510                           ;main.c: 37:     cod1 = 158;
   511  000B24  0E9E               	movlw	158
   512  000B26  0100               	movlb	0	; () banked
   513  000B28  6FA8               	movwf	_cod1& (0+255),b
   514  000B2A                     
   515                           ; BSR set to: 0
   516                           ;main.c: 38:     LCD_Init();
   517  000B2A  ECF9  F008         	call	_LCD_Init	;wreg free
   518  000B2E                     
   519                           ;main.c: 39:     InitPort();
   520  000B2E  ECA2  F00B         	call	_InitPort	;wreg free
   521  000B32                     
   522                           ;main.c: 41:     LCD_gotoXY(0,0);
   523  000B32  0E00               	movlw	0
   524  000B34  6E04               	movwf	(LCD_gotoXY@x+1)^0,c
   525  000B36  0E00               	movlw	0
   526  000B38  6E03               	movwf	LCD_gotoXY@x^0,c
   527  000B3A  0E00               	movlw	0
   528  000B3C  6E06               	movwf	(LCD_gotoXY@y+1)^0,c
   529  000B3E  0E00               	movlw	0
   530  000B40  6E05               	movwf	LCD_gotoXY@y^0,c
   531  000B42  EC5C  F00B         	call	_LCD_gotoXY	;wreg free
   532  000B46                     
   533                           ;main.c: 42:     LCD_Cadena("RFID LECTURA TAG");
   534  000B46  0E12               	movlw	low STR_1
   535  000B48  6E03               	movwf	LCD_Cadena@dato^0,c
   536  000B4A  0E08               	movlw	high STR_1
   537  000B4C  6E04               	movwf	(LCD_Cadena@dato+1)^0,c
   538  000B4E  EC30  F00A         	call	_LCD_Cadena	;wreg free
   539  000B52                     
   540                           ;main.c: 43:     _delay((unsigned long)((1000)*(48000000/4000.0)));
   541  000B52  0E3D               	movlw	61
   542  000B54  6E5F               	movwf	(??_main+1)^0,c
   543  000B56  0EE1               	movlw	225
   544  000B58  6E5E               	movwf	??_main^0,c
   545  000B5A  0E40               	movlw	64
   546  000B5C                     u1117:
   547  000B5C  2EE8               	decfsz	wreg,f,c
   548  000B5E  D7FE               	bra	u1117
   549  000B60  2E5E               	decfsz	??_main^0,f,c
   550  000B62  D7FC               	bra	u1117
   551  000B64  2E5F               	decfsz	(??_main+1)^0,f,c
   552  000B66  D7FA               	bra	u1117
   553  000B68                     l1754:
   554                           
   555                           ;main.c: 47:                if((PORTCbits.RC0 == 1) && (i<5))
   556  000B68  A082               	btfss	130,0,c	;volatile
   557  000B6A  EFB9  F005         	goto	u1041
   558  000B6E  EFBB  F005         	goto	u1040
   559  000B72                     u1041:
   560  000B72  EF27  F006         	goto	l33
   561  000B76                     u1040:
   562  000B76  0100               	movlb	0	; () banked
   563  000B78  BF69               	btfsc	(_i+1)& (0+255),7,b
   564  000B7A  EFCA  F005         	goto	u1050
   565  000B7E  5169               	movf	(_i+1)& (0+255),w,b
   566  000B80  E107               	bnz	u1051
   567  000B82  0E05               	movlw	5
   568  000B84  5D68               	subwf	_i& (0+255),w,b
   569  000B86  B0D8               	btfsc	status,0,c
   570  000B88  EFC8  F005         	goto	u1051
   571  000B8C  EFCA  F005         	goto	u1050
   572  000B90                     u1051:
   573  000B90  EF27  F006         	goto	l33
   574  000B94                     u1050:
   575  000B94                     
   576                           ; BSR set to: 0
   577                           ;main.c: 48:                    {;main.c: 49:                         _delay((unsigned l
      +                          ong)((200)*(48000000/4000.0)));
   578  000B94  0E0D               	movlw	13
   579  000B96  6E5F               	movwf	(??_main+1)^0,c
   580  000B98  0E2D               	movlw	45
   581  000B9A  6E5E               	movwf	??_main^0,c
   582  000B9C  0ED8               	movlw	216
   583  000B9E                     u1127:
   584  000B9E  2EE8               	decfsz	wreg,f,c
   585  000BA0  D7FE               	bra	u1127
   586  000BA2  2E5E               	decfsz	??_main^0,f,c
   587  000BA4  D7FC               	bra	u1127
   588  000BA6  2E5F               	decfsz	(??_main+1)^0,f,c
   589  000BA8  D7FA               	bra	u1127
   590  000BAA                     l34:
   591  000BAA  B082               	btfsc	130,0,c	;volatile
   592  000BAC  EFDA  F005         	goto	u1061
   593  000BB0  EFDC  F005         	goto	u1060
   594  000BB4                     u1061:
   595  000BB4  EFD5  F005         	goto	l34
   596  000BB8                     u1060:
   597  000BB8                     
   598                           ;main.c: 51:                         sprintf (texto,"Entro: %d  ",cod1);
   599  000BB8  0E94               	movlw	low _texto
   600  000BBA  6E58               	movwf	sprintf@s^0,c
   601  000BBC  0E00               	movlw	high _texto
   602  000BBE  6E59               	movwf	(sprintf@s+1)^0,c
   603  000BC0  0E2F               	movlw	low STR_2
   604  000BC2  6E5A               	movwf	sprintf@fmt^0,c
   605  000BC4  0E08               	movlw	high STR_2
   606  000BC6  6E5B               	movwf	(sprintf@fmt+1)^0,c
   607  000BC8  C0A8  F05C         	movff	_cod1,?_sprintf+4
   608  000BCC  6A5D               	clrf	(?_sprintf+5)^0,c
   609  000BCE  ECF1  F00A         	call	_sprintf	;wreg free
   610  000BD2                     
   611                           ;main.c: 52:                         LCD_gotoXY(1,0);
   612  000BD2  0E00               	movlw	0
   613  000BD4  6E04               	movwf	(LCD_gotoXY@x+1)^0,c
   614  000BD6  0E01               	movlw	1
   615  000BD8  6E03               	movwf	LCD_gotoXY@x^0,c
   616  000BDA  0E00               	movlw	0
   617  000BDC  6E06               	movwf	(LCD_gotoXY@y+1)^0,c
   618  000BDE  0E00               	movlw	0
   619  000BE0  6E05               	movwf	LCD_gotoXY@y^0,c
   620  000BE2  EC5C  F00B         	call	_LCD_gotoXY	;wreg free
   621  000BE6                     
   622                           ;main.c: 53:                         LCD_Cadena(texto);
   623  000BE6  0E94               	movlw	low _texto
   624  000BE8  6E03               	movwf	LCD_Cadena@dato^0,c
   625  000BEA  0E00               	movlw	high _texto
   626  000BEC  6E04               	movwf	(LCD_Cadena@dato+1)^0,c
   627  000BEE  EC30  F00A         	call	_LCD_Cadena	;wreg free
   628  000BF2                     
   629                           ;main.c: 54:                         i++;
   630  000BF2  0100               	movlb	0	; () banked
   631  000BF4  4B68               	infsnz	_i& (0+255),f,b
   632  000BF6  2B69               	incf	(_i+1)& (0+255),f,b
   633  000BF8                     
   634                           ; BSR set to: 0
   635                           ;main.c: 55:                         sprintf(cont, "# %d ", i);
   636  000BF8  0E8A               	movlw	low _cont
   637  000BFA  6E58               	movwf	sprintf@s^0,c
   638  000BFC  0E00               	movlw	high _cont
   639  000BFE  6E59               	movwf	(sprintf@s+1)^0,c
   640  000C00  0E3B               	movlw	low STR_3
   641  000C02  6E5A               	movwf	sprintf@fmt^0,c
   642  000C04  0E08               	movlw	high STR_3
   643  000C06  6E5B               	movwf	(sprintf@fmt+1)^0,c
   644  000C08  C068  F05C         	movff	_i,?_sprintf+4
   645  000C0C  C069  F05D         	movff	_i+1,?_sprintf+5
   646  000C10  ECF1  F00A         	call	_sprintf	;wreg free
   647  000C14                     l1770:
   648                           
   649                           ;main.c: 56:                         LCD_gotoXY(1,12);
   650  000C14  0E00               	movlw	0
   651  000C16  6E04               	movwf	(LCD_gotoXY@x+1)^0,c
   652  000C18  0E01               	movlw	1
   653  000C1A  6E03               	movwf	LCD_gotoXY@x^0,c
   654  000C1C  0E00               	movlw	0
   655  000C1E  6E06               	movwf	(LCD_gotoXY@y+1)^0,c
   656  000C20  0E0C               	movlw	12
   657  000C22  6E05               	movwf	LCD_gotoXY@y^0,c
   658  000C24  EC5C  F00B         	call	_LCD_gotoXY	;wreg free
   659  000C28                     
   660                           ;main.c: 57:                         LCD_Cadena(cont);
   661  000C28  0E8A               	movlw	low _cont
   662  000C2A  6E03               	movwf	LCD_Cadena@dato^0,c
   663  000C2C  0E00               	movlw	high _cont
   664  000C2E  6E04               	movwf	(LCD_Cadena@dato+1)^0,c
   665  000C30  EC30  F00A         	call	_LCD_Cadena	;wreg free
   666  000C34                     
   667                           ;main.c: 58:                         _delay((unsigned long)((200)*(48000000/4000.0)));
   668  000C34  0E0D               	movlw	13
   669  000C36  6E5F               	movwf	(??_main+1)^0,c
   670  000C38  0E2D               	movlw	45
   671  000C3A  6E5E               	movwf	??_main^0,c
   672  000C3C  0ED8               	movlw	216
   673  000C3E                     u1137:
   674  000C3E  2EE8               	decfsz	wreg,f,c
   675  000C40  D7FE               	bra	u1137
   676  000C42  2E5E               	decfsz	??_main^0,f,c
   677  000C44  D7FC               	bra	u1137
   678  000C46  2E5F               	decfsz	(??_main+1)^0,f,c
   679  000C48  D7FA               	bra	u1137
   680                           
   681                           ;main.c: 60:                    }
   682  000C4A  EF7F  F006         	goto	l37
   683  000C4E                     l33:
   684  000C4E  A282               	btfss	130,1,c	;volatile
   685  000C50  EF2C  F006         	goto	u1071
   686  000C54  EF2E  F006         	goto	u1070
   687  000C58                     u1071:
   688  000C58  EF7F  F006         	goto	l37
   689  000C5C                     u1070:
   690  000C5C  0100               	movlb	0	; () banked
   691  000C5E  BF69               	btfsc	(_i+1)& (0+255),7,b
   692  000C60  EF3A  F006         	goto	u1081
   693  000C64  5169               	movf	(_i+1)& (0+255),w,b
   694  000C66  E108               	bnz	u1080
   695  000C68  0568               	decf	_i& (0+255),w,b
   696  000C6A  A0D8               	btfss	status,0,c
   697  000C6C  EF3A  F006         	goto	u1081
   698  000C70  EF3C  F006         	goto	u1080
   699  000C74                     u1081:
   700  000C74  EF7F  F006         	goto	l37
   701  000C78                     u1080:
   702  000C78                     
   703                           ; BSR set to: 0
   704                           ;main.c: 63:                     {;main.c: 64:                         _delay((unsigned 
      +                          long)((200)*(48000000/4000.0)));
   705  000C78  0E0D               	movlw	13
   706  000C7A  6E5F               	movwf	(??_main+1)^0,c
   707  000C7C  0E2D               	movlw	45
   708  000C7E  6E5E               	movwf	??_main^0,c
   709  000C80  0ED8               	movlw	216
   710  000C82                     u1147:
   711  000C82  2EE8               	decfsz	wreg,f,c
   712  000C84  D7FE               	bra	u1147
   713  000C86  2E5E               	decfsz	??_main^0,f,c
   714  000C88  D7FC               	bra	u1147
   715  000C8A  2E5F               	decfsz	(??_main+1)^0,f,c
   716  000C8C  D7FA               	bra	u1147
   717  000C8E                     l39:
   718  000C8E  B282               	btfsc	130,1,c	;volatile
   719  000C90  EF4C  F006         	goto	u1091
   720  000C94  EF4E  F006         	goto	u1090
   721  000C98                     u1091:
   722  000C98  EF47  F006         	goto	l39
   723  000C9C                     u1090:
   724  000C9C                     
   725                           ;main.c: 66:                         sprintf (texto,"Salio: %d  ",cod1);
   726  000C9C  0E94               	movlw	low _texto
   727  000C9E  6E58               	movwf	sprintf@s^0,c
   728  000CA0  0E00               	movlw	high _texto
   729  000CA2  6E59               	movwf	(sprintf@s+1)^0,c
   730  000CA4  0E23               	movlw	low STR_4
   731  000CA6  6E5A               	movwf	sprintf@fmt^0,c
   732  000CA8  0E08               	movlw	high STR_4
   733  000CAA  6E5B               	movwf	(sprintf@fmt+1)^0,c
   734  000CAC  C0A8  F05C         	movff	_cod1,?_sprintf+4
   735  000CB0  6A5D               	clrf	(?_sprintf+5)^0,c
   736  000CB2  ECF1  F00A         	call	_sprintf	;wreg free
   737  000CB6                     
   738                           ;main.c: 67:                         LCD_gotoXY(1,0);
   739  000CB6  0E00               	movlw	0
   740  000CB8  6E04               	movwf	(LCD_gotoXY@x+1)^0,c
   741  000CBA  0E01               	movlw	1
   742  000CBC  6E03               	movwf	LCD_gotoXY@x^0,c
   743  000CBE  0E00               	movlw	0
   744  000CC0  6E06               	movwf	(LCD_gotoXY@y+1)^0,c
   745  000CC2  0E00               	movlw	0
   746  000CC4  6E05               	movwf	LCD_gotoXY@y^0,c
   747  000CC6  EC5C  F00B         	call	_LCD_gotoXY	;wreg free
   748  000CCA                     
   749                           ;main.c: 68:                         LCD_Cadena(texto);
   750  000CCA  0E94               	movlw	low _texto
   751  000CCC  6E03               	movwf	LCD_Cadena@dato^0,c
   752  000CCE  0E00               	movlw	high _texto
   753  000CD0  6E04               	movwf	(LCD_Cadena@dato+1)^0,c
   754  000CD2  EC30  F00A         	call	_LCD_Cadena	;wreg free
   755  000CD6                     
   756                           ;main.c: 69:                         i--;
   757  000CD6  0100               	movlb	0	; () banked
   758  000CD8  0768               	decf	_i& (0+255),f,b
   759  000CDA  A0D8               	btfss	status,0,c
   760  000CDC  0769               	decf	(_i+1)& (0+255),f,b
   761  000CDE                     
   762                           ; BSR set to: 0
   763                           ;main.c: 70:                         sprintf(cont, "# %d ", i);
   764  000CDE  0E8A               	movlw	low _cont
   765  000CE0  6E58               	movwf	sprintf@s^0,c
   766  000CE2  0E00               	movlw	high _cont
   767  000CE4  6E59               	movwf	(sprintf@s+1)^0,c
   768  000CE6  0E3B               	movlw	low STR_3
   769  000CE8  6E5A               	movwf	sprintf@fmt^0,c
   770  000CEA  0E08               	movlw	high STR_3
   771  000CEC  6E5B               	movwf	(sprintf@fmt+1)^0,c
   772  000CEE  C068  F05C         	movff	_i,?_sprintf+4
   773  000CF2  C069  F05D         	movff	_i+1,?_sprintf+5
   774  000CF6  ECF1  F00A         	call	_sprintf	;wreg free
   775  000CFA  EF0A  F006         	goto	l1770
   776  000CFE                     l37:
   777                           
   778                           ;main.c: 76:                 if (i==5)
   779  000CFE  0E05               	movlw	5
   780  000D00  0100               	movlb	0	; () banked
   781  000D02  1968               	xorwf	_i& (0+255),w,b
   782  000D04  1169               	iorwf	(_i+1)& (0+255),w,b
   783  000D06  A4D8               	btfss	status,2,c
   784  000D08  EF88  F006         	goto	u1101
   785  000D0C  EF8A  F006         	goto	u1100
   786  000D10                     u1101:
   787  000D10  EFB4  F005         	goto	l1754
   788  000D14                     u1100:
   789  000D14                     
   790                           ; BSR set to: 0
   791                           ;main.c: 77:                     {;main.c: 78:                         _delay((unsigned 
      +                          long)((200)*(48000000/4000.0)));
   792  000D14  0E0D               	movlw	13
   793  000D16  6E5F               	movwf	(??_main+1)^0,c
   794  000D18  0E2D               	movlw	45
   795  000D1A  6E5E               	movwf	??_main^0,c
   796  000D1C  0ED8               	movlw	216
   797  000D1E                     u1157:
   798  000D1E  2EE8               	decfsz	wreg,f,c
   799  000D20  D7FE               	bra	u1157
   800  000D22  2E5E               	decfsz	??_main^0,f,c
   801  000D24  D7FC               	bra	u1157
   802  000D26  2E5F               	decfsz	(??_main+1)^0,f,c
   803  000D28  D7FA               	bra	u1157
   804  000D2A                     
   805                           ;main.c: 79:                         LCD_gotoXY(1,0);
   806  000D2A  0E00               	movlw	0
   807  000D2C  6E04               	movwf	(LCD_gotoXY@x+1)^0,c
   808  000D2E  0E01               	movlw	1
   809  000D30  6E03               	movwf	LCD_gotoXY@x^0,c
   810  000D32  0E00               	movlw	0
   811  000D34  6E06               	movwf	(LCD_gotoXY@y+1)^0,c
   812  000D36  0E00               	movlw	0
   813  000D38  6E05               	movwf	LCD_gotoXY@y^0,c
   814  000D3A  EC5C  F00B         	call	_LCD_gotoXY	;wreg free
   815  000D3E                     
   816                           ;main.c: 80:                         LCD_Cadena("***AULA LLENA***");
   817  000D3E  0E01               	movlw	low STR_6
   818  000D40  6E03               	movwf	LCD_Cadena@dato^0,c
   819  000D42  0E08               	movlw	high STR_6
   820  000D44  6E04               	movwf	(LCD_Cadena@dato+1)^0,c
   821  000D46  EC30  F00A         	call	_LCD_Cadena	;wreg free
   822  000D4A  EFB4  F005         	goto	l1754
   823  000D4E  EF00  F000         	goto	start
   824  000D52                     __end_of_main:
   825                           	callstack 0
   826                           
   827 ;; *************** function _sprintf *****************
   828 ;; Defined at:
   829 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\nf_sprintf.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;  s               2   87[COMRAM] PTR unsigned char 
   832 ;;		 -> cont(10), texto(10), 
   833 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   834 ;;		 -> STR_5(6), STR_4(12), STR_3(6), STR_2(12), 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  f               6    4[BANK0 ] struct _IO_FILE
   837 ;;  ap              2    2[BANK0 ] PTR void [1]
   838 ;;		 -> ?_sprintf(2), 
   839 ;;  ret             2    0        int 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  2   87[COMRAM] int 
   842 ;; Registers used:
   843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   849 ;;      Params:         6       0       0       0       0       0       0       0       0
   850 ;;      Locals:         0      10       0       0       0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0       0       0
   852 ;;      Totals:         6      10       0       0       0       0       0       0       0
   853 ;;Total ram usage:       16 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    7
   856 ;; This function calls:
   857 ;;		_vfprintf
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text1
   864  0015E2                     __ptext1:
   865                           	callstack 0
   866  0015E2                     _sprintf:
   867                           	callstack 23
   868  0015E2  0E5C               	movlw	low (?_sprintf+4)
   869  0015E4  0100               	movlb	0	; () banked
   870  0015E6  6FA0               	movwf	sprintf@ap& (0+255),b
   871  0015E8  0E00               	movlw	high (?_sprintf+4)
   872  0015EA  6FA1               	movwf	(sprintf@ap+1)& (0+255),b
   873  0015EC  C058  F0A2         	movff	sprintf@s,sprintf@f
   874  0015F0  C059  F0A3         	movff	sprintf@s+1,sprintf@f+1
   875  0015F4                     
   876                           ; BSR set to: 0
   877  0015F4  0E00               	movlw	0
   878  0015F6  6FA5               	movwf	(sprintf@f+3)& (0+255),b
   879  0015F8  0E00               	movlw	0
   880  0015FA  6FA4               	movwf	(sprintf@f+2)& (0+255),b
   881  0015FC                     
   882                           ; BSR set to: 0
   883  0015FC  0E00               	movlw	0
   884  0015FE  6FA7               	movwf	(sprintf@f+5)& (0+255),b
   885  001600  0E00               	movlw	0
   886  001602  6FA6               	movwf	(sprintf@f+4)& (0+255),b
   887  001604                     
   888                           ; BSR set to: 0
   889  001604  0EA2               	movlw	low sprintf@f
   890  001606  6E50               	movwf	vfprintf@fp^0,c
   891  001608  0E00               	movlw	high sprintf@f
   892  00160A  6E51               	movwf	(vfprintf@fp+1)^0,c
   893  00160C  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   894  001610  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   895  001614  0EA0               	movlw	low sprintf@ap
   896  001616  6E54               	movwf	vfprintf@ap^0,c
   897  001618  0E00               	movlw	high sprintf@ap
   898  00161A  6E55               	movwf	(vfprintf@ap+1)^0,c
   899  00161C  EC67  F00A         	call	_vfprintf	;wreg free
   900  001620  0100               	movlb	0	; () banked
   901  001622  51A4               	movf	(sprintf@f+2)& (0+255),w,b
   902  001624  2458               	addwf	sprintf@s^0,w,c
   903  001626  6ED9               	movwf	fsr2l,c
   904  001628  51A5               	movf	(sprintf@f+3)& (0+255),w,b
   905  00162A  2059               	addwfc	(sprintf@s+1)^0,w,c
   906  00162C  6EDA               	movwf	fsr2h,c
   907  00162E  0E00               	movlw	0
   908  001630  6EDF               	movwf	indf2,c
   909  001632                     
   910                           ; BSR set to: 0
   911  001632  0012               	return		;funcret
   912  001634                     __end_of_sprintf:
   913                           	callstack 0
   914                           
   915 ;; *************** function _vfprintf *****************
   916 ;; Defined at:
   917 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   920 ;;		 -> sprintf@f(6), 
   921 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   922 ;;		 -> STR_5(6), STR_4(12), STR_3(6), STR_2(12), 
   923 ;;  ap              2   83[COMRAM] PTR PTR void 
   924 ;;		 -> sprintf@ap(2), 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   927 ;;		 -> STR_5(6), STR_4(12), STR_3(6), STR_2(12), 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  2   79[COMRAM] int 
   930 ;; Registers used:
   931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   937 ;;      Params:         6       0       0       0       0       0       0       0       0
   938 ;;      Locals:         2       0       0       0       0       0       0       0       0
   939 ;;      Temps:          0       0       0       0       0       0       0       0       0
   940 ;;      Totals:         8       0       0       0       0       0       0       0       0
   941 ;;Total ram usage:        8 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    6
   944 ;; This function calls:
   945 ;;		_vfpfcnvrt
   946 ;; This function is called by:
   947 ;;		_sprintf
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text2
   952  0014CE                     __ptext2:
   953                           	callstack 0
   954  0014CE                     _vfprintf:
   955                           	callstack 23
   956  0014CE                     
   957                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.30\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   958  0014CE  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   959  0014D2  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   960  0014D6                     
   961                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   962  0014D6  0E00               	movlw	0
   963  0014D8  0100               	movlb	0	; () banked
   964  0014DA  6F61               	movwf	(_nout+1)& (0+255),b
   965  0014DC  0E00               	movlw	0
   966  0014DE  6F60               	movwf	_nout& (0+255),b
   967                           
   968                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   969  0014E0  EF85  F00A         	goto	l1656
   970  0014E4                     l1654:
   971                           
   972                           ; BSR set to: 0
   973                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   974  0014E4  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   975  0014E8  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   976  0014EC  0E56               	movlw	low vfprintf@cfmt
   977  0014EE  6E42               	movwf	vfpfcnvrt@fmt^0,c
   978  0014F0  0E00               	movlw	high vfprintf@cfmt
   979  0014F2  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   980  0014F4  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   981  0014F8  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   982  0014FC  ECA9  F006         	call	_vfpfcnvrt	;wreg free
   983  001500  5040               	movf	?_vfpfcnvrt^0,w,c
   984  001502  0100               	movlb	0	; () banked
   985  001504  2760               	addwf	_nout& (0+255),f,b
   986  001506  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   987  001508  2361               	addwfc	(_nout+1)& (0+255),f,b
   988  00150A                     l1656:
   989                           
   990                           ; BSR set to: 0
   991                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   992  00150A  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   993  00150E  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   994  001512                     	if	0	;tblptru may be non-zero
   995  001512                     	endif
   996  001512                     	if	0	;tblptru may be non-zero
   997  001512                     	endif
   998  001512  0008               	tblrd		*
   999  001514  50F5               	movf	tablat,w,c
  1000  001516  0900               	iorlw	0
  1001  001518  A4D8               	btfss	status,2,c
  1002  00151A  EF91  F00A         	goto	u991
  1003  00151E  EF93  F00A         	goto	u990
  1004  001522                     u991:
  1005  001522  EF72  F00A         	goto	l1654
  1006  001526                     u990:
  1007  001526                     
  1008                           ; BSR set to: 0
  1009                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  1010  001526  C060  F050         	movff	_nout,?_vfprintf
  1011  00152A  C061  F051         	movff	_nout+1,?_vfprintf+1
  1012  00152E                     
  1013                           ; BSR set to: 0
  1014  00152E  0012               	return		;funcret
  1015  001530                     __end_of_vfprintf:
  1016                           	callstack 0
  1017                           
  1018 ;; *************** function _vfpfcnvrt *****************
  1019 ;; Defined at:
  1020 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  1023 ;;		 -> sprintf@f(6), 
  1024 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  1025 ;;		 -> vfprintf@cfmt(2), 
  1026 ;;  ap              2   67[COMRAM] PTR PTR void 
  1027 ;;		 -> sprintf@ap(2), 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  ll              8   71[COMRAM] long long 
  1030 ;;  llu             8    0        unsigned long long 
  1031 ;;  f               4    0        unsigned long long 
  1032 ;;  vp              3    0        PTR void 
  1033 ;;  ct              3    0        unsigned char [3]
  1034 ;;  cp              3    0        PTR unsigned char 
  1035 ;;  i               2    0        int 
  1036 ;;  done            2    0        int 
  1037 ;;  c               1    0        unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2   63[COMRAM] int 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         6       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1049 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1050 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1051 ;;Total ram usage:       16 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    5
  1054 ;; This function calls:
  1055 ;;		_dtoa
  1056 ;;		_fputc
  1057 ;; This function is called by:
  1058 ;;		_vfprintf
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text3
  1063  000D52                     __ptext3:
  1064                           	callstack 0
  1065  000D52                     _vfpfcnvrt:
  1066                           	callstack 23
  1067  000D52                     
  1068                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.30\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.30\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.30\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          0\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  1069  000D52  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1070  000D56  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1071  000D5A  CFDE FFF6          	movff	postinc2,tblptrl
  1072  000D5E  CFDD FFF7          	movff	postdec2,tblptrh
  1073  000D62                     	if	0	;tblptru may be non-zero
  1074  000D62                     	endif
  1075  000D62                     	if	0	;tblptru may be non-zero
  1076  000D62                     	endif
  1077  000D62  0008               	tblrd		*
  1078  000D64  50F5               	movf	tablat,w,c
  1079  000D66  0A25               	xorlw	37
  1080  000D68  A4D8               	btfss	status,2,c
  1081  000D6A  EFB9  F006         	goto	u951
  1082  000D6E  EFBB  F006         	goto	u950
  1083  000D72                     u951:
  1084  000D72  EF67  F007         	goto	l1570
  1085  000D76                     u950:
  1086  000D76                     
  1087                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  1088  000D76  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1089  000D7A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1090  000D7E  2ADE               	incf	postinc2,f,c
  1091  000D80  0E00               	movlw	0
  1092  000D82  22DD               	addwfc	postdec2,f,c
  1093  000D84                     
  1094                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  1095  000D84  0E00               	movlw	0
  1096  000D86  0100               	movlb	0	; () banked
  1097  000D88  6F63               	movwf	(_width+1)& (0+255),b
  1098  000D8A  0E00               	movlw	0
  1099  000D8C  6F62               	movwf	_width& (0+255),b
  1100  000D8E  C062  F066         	movff	_width,_flags
  1101  000D92  C063  F067         	movff	_width+1,_flags+1
  1102  000D96                     
  1103                           ; BSR set to: 0
  1104                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  1105  000D96  6964               	setf	_prec& (0+255),b
  1106  000D98  6965               	setf	(_prec+1)& (0+255),b
  1107  000D9A                     
  1108                           ; BSR set to: 0
  1109                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1110  000D9A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1111  000D9E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1112  000DA2  CFDE FFF6          	movff	postinc2,tblptrl
  1113  000DA6  CFDD FFF7          	movff	postdec2,tblptrh
  1114  000DAA                     	if	0	;tblptru may be non-zero
  1115  000DAA                     	endif
  1116  000DAA                     	if	0	;tblptru may be non-zero
  1117  000DAA                     	endif
  1118  000DAA  0008               	tblrd		*
  1119  000DAC  50F5               	movf	tablat,w,c
  1120  000DAE  0A64               	xorlw	100
  1121  000DB0  B4D8               	btfsc	status,2,c
  1122  000DB2  EFDD  F006         	goto	u961
  1123  000DB6  EFDF  F006         	goto	u960
  1124  000DBA                     u961:
  1125  000DBA  EFF1  F006         	goto	l1548
  1126  000DBE                     u960:
  1127  000DBE                     
  1128                           ; BSR set to: 0
  1129  000DBE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1130  000DC2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1131  000DC6  CFDE FFF6          	movff	postinc2,tblptrl
  1132  000DCA  CFDD FFF7          	movff	postdec2,tblptrh
  1133  000DCE                     	if	0	;tblptru may be non-zero
  1134  000DCE                     	endif
  1135  000DCE                     	if	0	;tblptru may be non-zero
  1136  000DCE                     	endif
  1137  000DCE  0008               	tblrd		*
  1138  000DD0  50F5               	movf	tablat,w,c
  1139  000DD2  0A69               	xorlw	105
  1140  000DD4  A4D8               	btfss	status,2,c
  1141  000DD6  EFEF  F006         	goto	u971
  1142  000DDA  EFF1  F006         	goto	u970
  1143  000DDE                     u971:
  1144  000DDE  EF31  F007         	goto	l1554
  1145  000DE2                     u970:
  1146  000DE2                     l1548:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1150  000DE2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1151  000DE6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1152  000DEA  2ADE               	incf	postinc2,f,c
  1153  000DEC  0E00               	movlw	0
  1154  000DEE  22DD               	addwfc	postdec2,f,c
  1155                           
  1156                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1157  000DF0  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1158  000DF4  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1159  000DF8  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1160  000DFC  0E02               	movlw	2
  1161  000DFE  26DE               	addwf	postinc2,f,c
  1162  000E00  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1163  000E04  0E00               	movlw	0
  1164  000E06  22DD               	addwfc	postdec2,f,c
  1165  000E08  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1166  000E0C  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1167  000E10  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  1168  000E14  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  1169  000E18  0E00               	movlw	0
  1170  000E1A  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1171  000E1C  0EFF               	movlw	-1
  1172  000E1E  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  1173  000E20  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  1174  000E22  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  1175  000E24  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  1176  000E26  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  1177  000E28  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  1178  000E2A                     
  1179                           ; BSR set to: 0
  1180                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1181  000E2A  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1182  000E2E  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1183  000E32  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1184  000E36  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1185  000E3A  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1186  000E3E  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1187  000E42  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1188  000E46  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1189  000E4A  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1190  000E4E  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1191  000E52  EC21  F004         	call	_dtoa	;wreg free
  1192  000E56  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1193  000E5A  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1194  000E5E  EF82  F007         	goto	l825
  1195  000E62                     l1554:
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1199  000E62  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1200  000E66  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1201  000E6A  CFDE FFF6          	movff	postinc2,tblptrl
  1202  000E6E  CFDD FFF7          	movff	postdec2,tblptrh
  1203  000E72                     	if	0	;tblptru may be non-zero
  1204  000E72                     	endif
  1205  000E72                     	if	0	;tblptru may be non-zero
  1206  000E72                     	endif
  1207  000E72  0008               	tblrd		*
  1208  000E74  50F5               	movf	tablat,w,c
  1209  000E76  0A25               	xorlw	37
  1210  000E78  A4D8               	btfss	status,2,c
  1211  000E7A  EF41  F007         	goto	u981
  1212  000E7E  EF43  F007         	goto	u980
  1213  000E82                     u981:
  1214  000E82  EF5A  F007         	goto	l1564
  1215  000E86                     u980:
  1216  000E86                     
  1217                           ; BSR set to: 0
  1218                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1219  000E86  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1220  000E8A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1221  000E8E  2ADE               	incf	postinc2,f,c
  1222  000E90  0E00               	movlw	0
  1223  000E92  22DD               	addwfc	postdec2,f,c
  1224  000E94                     
  1225                           ; BSR set to: 0
  1226                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1227  000E94  0E00               	movlw	0
  1228  000E96  6E02               	movwf	(fputc@c+1)^0,c
  1229  000E98  0E25               	movlw	37
  1230  000E9A  6E01               	movwf	fputc@c^0,c
  1231  000E9C  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1232  000EA0  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1233  000EA4  EC68  F009         	call	_fputc	;wreg free
  1234  000EA8                     l1560:
  1235                           
  1236                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1237  000EA8  0E00               	movlw	0
  1238  000EAA  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1239  000EAC  0E01               	movlw	1
  1240  000EAE  6E40               	movwf	?_vfpfcnvrt^0,c
  1241  000EB0  EF82  F007         	goto	l825
  1242  000EB4                     l1564:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1246  000EB4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1247  000EB8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1248  000EBC  2ADE               	incf	postinc2,f,c
  1249  000EBE  0E00               	movlw	0
  1250  000EC0  22DD               	addwfc	postdec2,f,c
  1251  000EC2                     
  1252                           ; BSR set to: 0
  1253                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1254  000EC2  0E00               	movlw	0
  1255  000EC4  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1256  000EC6  0E00               	movlw	0
  1257  000EC8  6E40               	movwf	?_vfpfcnvrt^0,c
  1258  000ECA  EF82  F007         	goto	l825
  1259  000ECE                     l1570:
  1260                           
  1261                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1262  000ECE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1263  000ED2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1264  000ED6  CFDE FFF6          	movff	postinc2,tblptrl
  1265  000EDA  CFDD FFF7          	movff	postdec2,tblptrh
  1266  000EDE                     	if	0	;tblptru may be non-zero
  1267  000EDE                     	endif
  1268  000EDE                     	if	0	;tblptru may be non-zero
  1269  000EDE                     	endif
  1270  000EDE  0008               	tblrd		*
  1271  000EE0  50F5               	movf	tablat,w,c
  1272  000EE2  6E01               	movwf	fputc@c^0,c
  1273  000EE4  6A02               	clrf	(fputc@c+1)^0,c
  1274  000EE6  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1275  000EEA  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1276  000EEE  EC68  F009         	call	_fputc	;wreg free
  1277  000EF2                     
  1278                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1279  000EF2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1280  000EF6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1281  000EFA  2ADE               	incf	postinc2,f,c
  1282  000EFC  0E00               	movlw	0
  1283  000EFE  22DD               	addwfc	postdec2,f,c
  1284  000F00  EF54  F007         	goto	l1560
  1285  000F04                     l825:
  1286  000F04  0012               	return		;funcret
  1287  000F06                     __end_of_vfpfcnvrt:
  1288                           	callstack 0
  1289                           
  1290 ;; *************** function _dtoa *****************
  1291 ;; Defined at:
  1292 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1295 ;;		 -> sprintf@f(6), 
  1296 ;;  d               8   29[COMRAM] long long 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  n               8   53[COMRAM] long long 
  1299 ;;  i               2   61[COMRAM] int 
  1300 ;;  s               2   51[COMRAM] int 
  1301 ;;  w               2   49[COMRAM] int 
  1302 ;;  p               2   47[COMRAM] int 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  2   27[COMRAM] int 
  1305 ;; Registers used:
  1306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1312 ;;      Params:        10       0       0       0       0       0       0       0       0
  1313 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1314 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1315 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1316 ;;Total ram usage:       36 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    4
  1319 ;; This function calls:
  1320 ;;		___aodiv
  1321 ;;		___aomod
  1322 ;;		_abs
  1323 ;;		_pad
  1324 ;; This function is called by:
  1325 ;;		_vfpfcnvrt
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text4
  1330  000842                     __ptext4:
  1331                           	callstack 0
  1332  000842                     _dtoa:
  1333                           	callstack 23
  1334  000842                     
  1335                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1336  000842  C01E  F036         	movff	dtoa@d,dtoa@n
  1337  000846  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1338  00084A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1339  00084E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1340  000852  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1341  000856  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1342  00085A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1343  00085E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1344  000862                     
  1345                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1346  000862  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1347  000864  EF36  F004         	goto	u801
  1348  000868  EF39  F004         	goto	u800
  1349  00086C                     u801:
  1350  00086C  0E01               	movlw	1
  1351  00086E  EF3A  F004         	goto	u810
  1352  000872                     u800:
  1353  000872  0E00               	movlw	0
  1354  000874                     u810:
  1355  000874  6E34               	movwf	dtoa@s^0,c
  1356  000876  6A35               	clrf	(dtoa@s+1)^0,c
  1357                           
  1358                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1359  000878  5034               	movf	dtoa@s^0,w,c
  1360  00087A  1035               	iorwf	(dtoa@s+1)^0,w,c
  1361  00087C  B4D8               	btfsc	status,2,c
  1362  00087E  EF43  F004         	goto	u821
  1363  000882  EF45  F004         	goto	u820
  1364  000886                     u821:
  1365  000886  EF55  F004         	goto	l1480
  1366  00088A                     u820:
  1367  00088A                     
  1368                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1369  00088A  1E3D               	comf	(dtoa@n+7)^0,f,c
  1370  00088C  1E3C               	comf	(dtoa@n+6)^0,f,c
  1371  00088E  1E3B               	comf	(dtoa@n+5)^0,f,c
  1372  000890  1E3A               	comf	(dtoa@n+4)^0,f,c
  1373  000892  1E39               	comf	(dtoa@n+3)^0,f,c
  1374  000894  1E38               	comf	(dtoa@n+2)^0,f,c
  1375  000896  1E37               	comf	(dtoa@n+1)^0,f,c
  1376  000898  6C36               	negf	dtoa@n^0,c
  1377  00089A  0E00               	movlw	0
  1378  00089C  2237               	addwfc	(dtoa@n+1)^0,f,c
  1379  00089E  2238               	addwfc	(dtoa@n+2)^0,f,c
  1380  0008A0  2239               	addwfc	(dtoa@n+3)^0,f,c
  1381  0008A2  223A               	addwfc	(dtoa@n+4)^0,f,c
  1382  0008A4  223B               	addwfc	(dtoa@n+5)^0,f,c
  1383  0008A6  223C               	addwfc	(dtoa@n+6)^0,f,c
  1384  0008A8  223D               	addwfc	(dtoa@n+7)^0,f,c
  1385  0008AA                     l1480:
  1386                           
  1387                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1388  0008AA  0100               	movlb	0	; () banked
  1389  0008AC  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1390  0008AE  EF5B  F004         	goto	u831
  1391  0008B2  EF5D  F004         	goto	u830
  1392  0008B6                     u831:
  1393  0008B6  EF5E  F004         	goto	l1484
  1394  0008BA                     u830:
  1395  0008BA                     
  1396                           ; BSR set to: 0
  1397                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1398  0008BA  9366               	bcf	_flags& (0+255),1,b
  1399  0008BC                     l1484:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1403  0008BC  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1404  0008BE  EF6B  F004         	goto	u840
  1405  0008C2  5165               	movf	(_prec+1)& (0+255),w,b
  1406  0008C4  E106               	bnz	u841
  1407  0008C6  0564               	decf	_prec& (0+255),w,b
  1408  0008C8  B0D8               	btfsc	status,0,c
  1409  0008CA  EF69  F004         	goto	u841
  1410  0008CE  EF6B  F004         	goto	u840
  1411  0008D2                     u841:
  1412  0008D2  EF71  F004         	goto	l798
  1413  0008D6                     u840:
  1414  0008D6                     
  1415                           ; BSR set to: 0
  1416  0008D6  0E00               	movlw	0
  1417  0008D8  6E31               	movwf	(dtoa@p+1)^0,c
  1418  0008DA  0E01               	movlw	1
  1419  0008DC  6E30               	movwf	dtoa@p^0,c
  1420  0008DE  EF75  F004         	goto	l800
  1421  0008E2                     l798:
  1422                           
  1423                           ; BSR set to: 0
  1424  0008E2  C064  F030         	movff	_prec,dtoa@p
  1425  0008E6  C065  F031         	movff	_prec+1,dtoa@p+1
  1426  0008EA                     l800:
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1430  0008EA  C062  F032         	movff	_width,dtoa@w
  1431  0008EE  C063  F033         	movff	_width+1,dtoa@w+1
  1432  0008F2                     
  1433                           ; BSR set to: 0
  1434                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1435  0008F2  5034               	movf	dtoa@s^0,w,c
  1436  0008F4  1035               	iorwf	(dtoa@s+1)^0,w,c
  1437  0008F6  A4D8               	btfss	status,2,c
  1438  0008F8  EF80  F004         	goto	u851
  1439  0008FC  EF82  F004         	goto	u850
  1440  000900                     u851:
  1441  000900  EF89  F004         	goto	l1492
  1442  000904                     u850:
  1443  000904                     
  1444                           ; BSR set to: 0
  1445  000904  A566               	btfss	_flags& (0+255),2,b
  1446  000906  EF87  F004         	goto	u861
  1447  00090A  EF89  F004         	goto	u860
  1448  00090E                     u861:
  1449  00090E  EF8C  F004         	goto	l1494
  1450  000912                     u860:
  1451  000912                     l1492:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 306:         --w;
  1455  000912  0632               	decf	dtoa@w^0,f,c
  1456  000914  A0D8               	btfss	status,0,c
  1457  000916  0633               	decf	(dtoa@w+1)^0,f,c
  1458  000918                     l1494:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1462  000918  0E00               	movlw	0
  1463  00091A  6E3F               	movwf	(dtoa@i+1)^0,c
  1464  00091C  0E1F               	movlw	31
  1465  00091E  6E3E               	movwf	dtoa@i^0,c
  1466  000920                     
  1467                           ; BSR set to: 0
  1468                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1469  000920  0E00               	movlw	0
  1470  000922  6F89               	movwf	(_dbuf+31)& (0+255),b
  1471                           
  1472                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1473  000924  EF10  F005         	goto	l1508
  1474  000928                     l1498:
  1475                           
  1476                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 313:         --i;
  1477  000928  063E               	decf	dtoa@i^0,f,c
  1478  00092A  A0D8               	btfss	status,0,c
  1479  00092C  063F               	decf	(dtoa@i+1)^0,f,c
  1480  00092E                     
  1481                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1482  00092E  0E6A               	movlw	low _dbuf
  1483  000930  243E               	addwf	dtoa@i^0,w,c
  1484  000932  6ED9               	movwf	fsr2l,c
  1485  000934  0E00               	movlw	high _dbuf
  1486  000936  203F               	addwfc	(dtoa@i+1)^0,w,c
  1487  000938  6EDA               	movwf	fsr2h,c
  1488  00093A  C036  F001         	movff	dtoa@n,___aomod@dividend
  1489  00093E  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1490  000942  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1491  000946  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1492  00094A  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1493  00094E  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1494  000952  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1495  000956  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1496  00095A  0E0A               	movlw	10
  1497  00095C  6E09               	movwf	___aomod@divisor^0,c
  1498  00095E  0E00               	movlw	0
  1499  000960  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1500  000962  0E00               	movlw	0
  1501  000964  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1502  000966  0E00               	movlw	0
  1503  000968  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1504  00096A  0E00               	movlw	0
  1505  00096C  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1506  00096E  0E00               	movlw	0
  1507  000970  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1508  000972  0E00               	movlw	0
  1509  000974  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1510  000976  0E00               	movlw	0
  1511  000978  6E10               	movwf	(___aomod@divisor+7)^0,c
  1512  00097A  EC47  F008         	call	___aomod	;wreg free
  1513  00097E  C001  F026         	movff	?___aomod,??_dtoa
  1514  000982  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1515  000986  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1516  00098A  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1517  00098E  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1518  000992  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1519  000996  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1520  00099A  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1521  00099E  C026  F013         	movff	??_dtoa,abs@a
  1522  0009A2  C028  F014         	movff	??_dtoa+2,abs@a+1
  1523  0009A6  EC3C  F00B         	call	_abs	;wreg free
  1524  0009AA  5013               	movf	?_abs^0,w,c
  1525  0009AC  0F30               	addlw	48
  1526  0009AE  6EDF               	movwf	indf2,c
  1527  0009B0                     
  1528                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 315:         --p;
  1529  0009B0  0630               	decf	dtoa@p^0,f,c
  1530  0009B2  A0D8               	btfss	status,0,c
  1531  0009B4  0631               	decf	(dtoa@p+1)^0,f,c
  1532  0009B6                     
  1533                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 316:         --w;
  1534  0009B6  0632               	decf	dtoa@w^0,f,c
  1535  0009B8  A0D8               	btfss	status,0,c
  1536  0009BA  0633               	decf	(dtoa@w+1)^0,f,c
  1537  0009BC                     
  1538                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1539  0009BC  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1540  0009C0  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1541  0009C4  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1542  0009C8  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1543  0009CC  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1544  0009D0  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1545  0009D4  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1546  0009D8  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1547  0009DC  0E0A               	movlw	10
  1548  0009DE  6E09               	movwf	___aodiv@divisor^0,c
  1549  0009E0  0E00               	movlw	0
  1550  0009E2  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1551  0009E4  0E00               	movlw	0
  1552  0009E6  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1553  0009E8  0E00               	movlw	0
  1554  0009EA  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1555  0009EC  0E00               	movlw	0
  1556  0009EE  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1557  0009F0  0E00               	movlw	0
  1558  0009F2  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1559  0009F4  0E00               	movlw	0
  1560  0009F6  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1561  0009F8  0E00               	movlw	0
  1562  0009FA  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1563  0009FC  EC83  F007         	call	___aodiv	;wreg free
  1564  000A00  C001  F036         	movff	?___aodiv,dtoa@n
  1565  000A04  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1566  000A08  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1567  000A0C  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1568  000A10  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1569  000A14  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1570  000A18  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1571  000A1C  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1572  000A20                     l1508:
  1573                           
  1574                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1575  000A20  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1576  000A22  EF1B  F005         	goto	u871
  1577  000A26  503F               	movf	(dtoa@i+1)^0,w,c
  1578  000A28  E108               	bnz	u870
  1579  000A2A  043E               	decf	dtoa@i^0,w,c
  1580  000A2C  A0D8               	btfss	status,0,c
  1581  000A2E  EF1B  F005         	goto	u871
  1582  000A32  EF1D  F005         	goto	u870
  1583  000A36                     u871:
  1584  000A36  EF4E  F005         	goto	l1518
  1585  000A3A                     u870:
  1586  000A3A  5036               	movf	dtoa@n^0,w,c
  1587  000A3C  1037               	iorwf	(dtoa@n+1)^0,w,c
  1588  000A3E  1038               	iorwf	(dtoa@n+2)^0,w,c
  1589  000A40  1039               	iorwf	(dtoa@n+3)^0,w,c
  1590  000A42  103A               	iorwf	(dtoa@n+4)^0,w,c
  1591  000A44  103B               	iorwf	(dtoa@n+5)^0,w,c
  1592  000A46  103C               	iorwf	(dtoa@n+6)^0,w,c
  1593  000A48  103D               	iorwf	(dtoa@n+7)^0,w,c
  1594  000A4A  A4D8               	btfss	status,2,c
  1595  000A4C  EF2A  F005         	goto	u881
  1596  000A50  EF2C  F005         	goto	u880
  1597  000A54                     u881:
  1598  000A54  EF94  F004         	goto	l1498
  1599  000A58                     u880:
  1600  000A58  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1601  000A5A  EF39  F005         	goto	u890
  1602  000A5E  5031               	movf	(dtoa@p+1)^0,w,c
  1603  000A60  E106               	bnz	u891
  1604  000A62  0430               	decf	dtoa@p^0,w,c
  1605  000A64  B0D8               	btfsc	status,0,c
  1606  000A66  EF37  F005         	goto	u891
  1607  000A6A  EF39  F005         	goto	u890
  1608  000A6E                     u891:
  1609  000A6E  EF94  F004         	goto	l1498
  1610  000A72                     u890:
  1611  000A72  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1612  000A74  EF44  F005         	goto	u901
  1613  000A78  5033               	movf	(dtoa@w+1)^0,w,c
  1614  000A7A  E108               	bnz	u900
  1615  000A7C  0432               	decf	dtoa@w^0,w,c
  1616  000A7E  A0D8               	btfss	status,0,c
  1617  000A80  EF44  F005         	goto	u901
  1618  000A84  EF46  F005         	goto	u900
  1619  000A88                     u901:
  1620  000A88  EF4E  F005         	goto	l1518
  1621  000A8C                     u900:
  1622  000A8C  0100               	movlb	0	; () banked
  1623  000A8E  B366               	btfsc	_flags& (0+255),1,b
  1624  000A90  EF4C  F005         	goto	u911
  1625  000A94  EF4E  F005         	goto	u910
  1626  000A98                     u911:
  1627  000A98  EF94  F004         	goto	l1498
  1628  000A9C                     u910:
  1629  000A9C                     l1518:
  1630                           
  1631                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1632  000A9C  5034               	movf	dtoa@s^0,w,c
  1633  000A9E  1035               	iorwf	(dtoa@s+1)^0,w,c
  1634  000AA0  A4D8               	btfss	status,2,c
  1635  000AA2  EF55  F005         	goto	u921
  1636  000AA6  EF57  F005         	goto	u920
  1637  000AAA                     u921:
  1638  000AAA  EF5F  F005         	goto	l1522
  1639  000AAE                     u920:
  1640  000AAE  0100               	movlb	0	; () banked
  1641  000AB0  A566               	btfss	_flags& (0+255),2,b
  1642  000AB2  EF5D  F005         	goto	u931
  1643  000AB6  EF5F  F005         	goto	u930
  1644  000ABA                     u931:
  1645  000ABA  EF7D  F005         	goto	l1532
  1646  000ABE                     u930:
  1647  000ABE                     l1522:
  1648                           
  1649                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 322:         --i;
  1650  000ABE  063E               	decf	dtoa@i^0,f,c
  1651  000AC0  A0D8               	btfss	status,0,c
  1652  000AC2  063F               	decf	(dtoa@i+1)^0,f,c
  1653  000AC4                     
  1654                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1655  000AC4  5034               	movf	dtoa@s^0,w,c
  1656  000AC6  1035               	iorwf	(dtoa@s+1)^0,w,c
  1657  000AC8  A4D8               	btfss	status,2,c
  1658  000ACA  EF69  F005         	goto	u941
  1659  000ACE  EF6B  F005         	goto	u940
  1660  000AD2                     u941:
  1661  000AD2  EF71  F005         	goto	l1528
  1662  000AD6                     u940:
  1663  000AD6  0E00               	movlw	0
  1664  000AD8  6E2F               	movwf	(_dtoa$811+1)^0,c
  1665  000ADA  0E2B               	movlw	43
  1666  000ADC  6E2E               	movwf	_dtoa$811^0,c
  1667  000ADE  EF75  F005         	goto	l1530
  1668  000AE2                     l1528:
  1669  000AE2  0E00               	movlw	0
  1670  000AE4  6E2F               	movwf	(_dtoa$811+1)^0,c
  1671  000AE6  0E2D               	movlw	45
  1672  000AE8  6E2E               	movwf	_dtoa$811^0,c
  1673  000AEA                     l1530:
  1674  000AEA  0E6A               	movlw	low _dbuf
  1675  000AEC  243E               	addwf	dtoa@i^0,w,c
  1676  000AEE  6ED9               	movwf	fsr2l,c
  1677  000AF0  0E00               	movlw	high _dbuf
  1678  000AF2  203F               	addwfc	(dtoa@i+1)^0,w,c
  1679  000AF4  6EDA               	movwf	fsr2h,c
  1680  000AF6  C02E  FFDF         	movff	_dtoa$811,indf2
  1681  000AFA                     l1532:
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1684  000AFA  C01C  F011         	movff	dtoa@fp,pad@fp
  1685  000AFE  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1686  000B02  0E6A               	movlw	low _dbuf
  1687  000B04  243E               	addwf	dtoa@i^0,w,c
  1688  000B06  6E13               	movwf	pad@buf^0,c
  1689  000B08  0E00               	movlw	high _dbuf
  1690  000B0A  203F               	addwfc	(dtoa@i+1)^0,w,c
  1691  000B0C  6E14               	movwf	(pad@buf+1)^0,c
  1692  000B0E  C032  F015         	movff	dtoa@w,pad@p
  1693  000B12  C033  F016         	movff	dtoa@w+1,pad@p+1
  1694  000B16  ECCD  F009         	call	_pad	;wreg free
  1695  000B1A  C011  F01C         	movff	?_pad,?_dtoa
  1696  000B1E  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1697  000B22  0012               	return		;funcret
  1698  000B24                     __end_of_dtoa:
  1699                           	callstack 0
  1700                           
  1701 ;; *************** function _pad *****************
  1702 ;; Defined at:
  1703 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1706 ;;		 -> sprintf@f(6), 
  1707 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1708 ;;		 -> dbuf(32), 
  1709 ;;  p               2   20[COMRAM] int 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  w               2   25[COMRAM] int 
  1712 ;;  i               2   23[COMRAM] int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  2   16[COMRAM] int 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1722 ;;      Params:         6       0       0       0       0       0       0       0       0
  1723 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1724 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1725 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1726 ;;Total ram usage:       11 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    3
  1729 ;; This function calls:
  1730 ;;		_fputc
  1731 ;;		_fputs
  1732 ;;		_strlen
  1733 ;; This function is called by:
  1734 ;;		_dtoa
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text5
  1739  00139A                     __ptext5:
  1740                           	callstack 0
  1741  00139A                     _pad:
  1742                           	callstack 23
  1743  00139A                     
  1744                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1745  00139A  0100               	movlb	0	; () banked
  1746  00139C  A166               	btfss	_flags& (0+255),0,b
  1747  00139E  EFD3  F009         	goto	u751
  1748  0013A2  EFD5  F009         	goto	u750
  1749  0013A6                     u751:
  1750  0013A6  EFDF  F009         	goto	l1452
  1751  0013AA                     u750:
  1752  0013AA                     
  1753                           ; BSR set to: 0
  1754                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1755  0013AA  C013  F00A         	movff	pad@buf,fputs@s
  1756  0013AE  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1757  0013B2  C011  F00C         	movff	pad@fp,fputs@fp
  1758  0013B6  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1759  0013BA  EC1A  F00B         	call	_fputs	;wreg free
  1760  0013BE                     l1452:
  1761                           
  1762                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1763  0013BE  BE16               	btfsc	(pad@p+1)^0,7,c
  1764  0013C0  EFE4  F009         	goto	u761
  1765  0013C4  EFE6  F009         	goto	u760
  1766  0013C8                     u761:
  1767  0013C8  EFEC  F009         	goto	l1456
  1768  0013CC                     u760:
  1769  0013CC  C015  F01A         	movff	pad@p,pad@w
  1770  0013D0  C016  F01B         	movff	pad@p+1,pad@w+1
  1771  0013D4  EFF0  F009         	goto	l787
  1772  0013D8                     l1456:
  1773  0013D8  0E00               	movlw	0
  1774  0013DA  6E1B               	movwf	(pad@w+1)^0,c
  1775  0013DC  0E00               	movlw	0
  1776  0013DE  6E1A               	movwf	pad@w^0,c
  1777  0013E0                     l787:
  1778                           
  1779                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1780  0013E0  0E00               	movlw	0
  1781  0013E2  6E19               	movwf	(pad@i+1)^0,c
  1782  0013E4  0E00               	movlw	0
  1783  0013E6  6E18               	movwf	pad@i^0,c
  1784                           
  1785                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1786  0013E8  EF02  F00A         	goto	l1462
  1787  0013EC                     l1458:
  1788                           
  1789                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1790  0013EC  0E00               	movlw	0
  1791  0013EE  6E02               	movwf	(fputc@c+1)^0,c
  1792  0013F0  0E20               	movlw	32
  1793  0013F2  6E01               	movwf	fputc@c^0,c
  1794  0013F4  C011  F003         	movff	pad@fp,fputc@fp
  1795  0013F8  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1796  0013FC  EC68  F009         	call	_fputc	;wreg free
  1797  001400                     
  1798                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1799  001400  4A18               	infsnz	pad@i^0,f,c
  1800  001402  2A19               	incf	(pad@i+1)^0,f,c
  1801  001404                     l1462:
  1802                           
  1803                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1804  001404  501A               	movf	pad@w^0,w,c
  1805  001406  5C18               	subwf	pad@i^0,w,c
  1806  001408  5019               	movf	(pad@i+1)^0,w,c
  1807  00140A  0A80               	xorlw	128
  1808  00140C  6E17               	movwf	??_pad^0,c
  1809  00140E  501B               	movf	(pad@w+1)^0,w,c
  1810  001410  0A80               	xorlw	128
  1811  001412  5817               	subwfb	??_pad^0,w,c
  1812  001414  A0D8               	btfss	status,0,c
  1813  001416  EF0F  F00A         	goto	u771
  1814  00141A  EF11  F00A         	goto	u770
  1815  00141E                     u771:
  1816  00141E  EFF6  F009         	goto	l1458
  1817  001422                     u770:
  1818  001422                     
  1819                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1820  001422  0100               	movlb	0	; () banked
  1821  001424  B166               	btfsc	_flags& (0+255),0,b
  1822  001426  EF17  F00A         	goto	u781
  1823  00142A  EF19  F00A         	goto	u780
  1824  00142E                     u781:
  1825  00142E  EF23  F00A         	goto	l1466
  1826  001432                     u780:
  1827  001432                     
  1828                           ; BSR set to: 0
  1829                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1830  001432  C013  F00A         	movff	pad@buf,fputs@s
  1831  001436  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1832  00143A  C011  F00C         	movff	pad@fp,fputs@fp
  1833  00143E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1834  001442  EC1A  F00B         	call	_fputs	;wreg free
  1835  001446                     l1466:
  1836                           
  1837                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1838  001446  C013  F001         	movff	pad@buf,strlen@s
  1839  00144A  C014  F002         	movff	pad@buf+1,strlen@s+1
  1840  00144E  EC7C  F00B         	call	_strlen	;wreg free
  1841  001452  501A               	movf	pad@w^0,w,c
  1842  001454  2401               	addwf	?_strlen^0,w,c
  1843  001456  6E11               	movwf	?_pad^0,c
  1844  001458  501B               	movf	(pad@w+1)^0,w,c
  1845  00145A  2002               	addwfc	(?_strlen+1)^0,w,c
  1846  00145C  6E12               	movwf	(?_pad+1)^0,c
  1847  00145E  0012               	return		;funcret
  1848  001460                     __end_of_pad:
  1849                           	callstack 0
  1850                           
  1851 ;; *************** function _strlen *****************
  1852 ;; Defined at:
  1853 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\strlen.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1856 ;;		 -> dbuf(32), 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1859 ;;		 -> dbuf(32), 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  2    0[COMRAM] unsigned int 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         2       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        4 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_pad
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text6
  1883  0016F8                     __ptext6:
  1884                           	callstack 0
  1885  0016F8                     _strlen:
  1886                           	callstack 25
  1887  0016F8  C001  F003         	movff	strlen@s,strlen@a
  1888  0016FC  C002  F004         	movff	strlen@s+1,strlen@a+1
  1889  001700  EF84  F00B         	goto	l1362
  1890  001704                     l1360:
  1891  001704  4A01               	infsnz	strlen@s^0,f,c
  1892  001706  2A02               	incf	(strlen@s+1)^0,f,c
  1893  001708                     l1362:
  1894  001708  C001  FFD9         	movff	strlen@s,fsr2l
  1895  00170C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1896  001710  50DF               	movf	indf2,w,c
  1897  001712  A4D8               	btfss	status,2,c
  1898  001714  EF8E  F00B         	goto	u611
  1899  001718  EF90  F00B         	goto	u610
  1900  00171C                     u611:
  1901  00171C  EF82  F00B         	goto	l1360
  1902  001720                     u610:
  1903  001720  5003               	movf	strlen@a^0,w,c
  1904  001722  5C01               	subwf	strlen@s^0,w,c
  1905  001724  6E01               	movwf	?_strlen^0,c
  1906  001726  5004               	movf	(strlen@a+1)^0,w,c
  1907  001728  5802               	subwfb	(strlen@s+1)^0,w,c
  1908  00172A  6E02               	movwf	(?_strlen+1)^0,c
  1909  00172C  0012               	return		;funcret
  1910  00172E                     __end_of_strlen:
  1911                           	callstack 0
  1912                           
  1913 ;; *************** function _fputs *****************
  1914 ;; Defined at:
  1915 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\nf_fputs.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1918 ;;		 -> dbuf(32), 
  1919 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1920 ;;		 -> sprintf@f(6), 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  i               2   14[COMRAM] int 
  1923 ;;  c               1   13[COMRAM] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  2    9[COMRAM] int 
  1926 ;; Registers used:
  1927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1933 ;;      Params:         4       0       0       0       0       0       0       0       0
  1934 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1936 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1937 ;;Total ram usage:        7 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    2
  1940 ;; This function calls:
  1941 ;;		_fputc
  1942 ;; This function is called by:
  1943 ;;		_pad
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text7
  1948  001634                     __ptext7:
  1949                           	callstack 0
  1950  001634                     _fputs:
  1951                           	callstack 23
  1952  001634  0E00               	movlw	0
  1953  001636  6E10               	movwf	(fputs@i+1)^0,c
  1954  001638  0E00               	movlw	0
  1955  00163A  6E0F               	movwf	fputs@i^0,c
  1956  00163C  EF2B  F00B         	goto	l1356
  1957  001640                     l1352:
  1958  001640  C00E  F001         	movff	fputs@c,fputc@c
  1959  001644  6A02               	clrf	(fputc@c+1)^0,c
  1960  001646  C00C  F003         	movff	fputs@fp,fputc@fp
  1961  00164A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1962  00164E  EC68  F009         	call	_fputc	;wreg free
  1963  001652  4A0F               	infsnz	fputs@i^0,f,c
  1964  001654  2A10               	incf	(fputs@i+1)^0,f,c
  1965  001656                     l1356:
  1966  001656  500F               	movf	fputs@i^0,w,c
  1967  001658  240A               	addwf	fputs@s^0,w,c
  1968  00165A  6ED9               	movwf	fsr2l,c
  1969  00165C  5010               	movf	(fputs@i+1)^0,w,c
  1970  00165E  200B               	addwfc	(fputs@s+1)^0,w,c
  1971  001660  6EDA               	movwf	fsr2h,c
  1972  001662  50DF               	movf	indf2,w,c
  1973  001664  6E0E               	movwf	fputs@c^0,c
  1974  001666  500E               	movf	fputs@c^0,w,c
  1975  001668  A4D8               	btfss	status,2,c
  1976  00166A  EF39  F00B         	goto	u601
  1977  00166E  EF3B  F00B         	goto	u600
  1978  001672                     u601:
  1979  001672  EF20  F00B         	goto	l1352
  1980  001676                     u600:
  1981  001676  0012               	return		;funcret
  1982  001678                     __end_of_fputs:
  1983                           	callstack 0
  1984                           
  1985 ;; *************** function _fputc *****************
  1986 ;; Defined at:
  1987 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\nf_fputc.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  c               2    0[COMRAM] int 
  1990 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1991 ;;		 -> sprintf@f(6), 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  2    0[COMRAM] int 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2003 ;;      Params:         4       0       0       0       0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2005 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2006 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2007 ;;Total ram usage:        9 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    1
  2010 ;; This function calls:
  2011 ;;		_putch
  2012 ;; This function is called by:
  2013 ;;		_pad
  2014 ;;		_vfpfcnvrt
  2015 ;;		_fputs
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text8
  2020  0012D0                     __ptext8:
  2021                           	callstack 0
  2022  0012D0                     _fputc:
  2023                           	callstack 26
  2024  0012D0  5003               	movf	fputc@fp^0,w,c
  2025  0012D2  1004               	iorwf	(fputc@fp+1)^0,w,c
  2026  0012D4  B4D8               	btfsc	status,2,c
  2027  0012D6  EF6F  F009         	goto	u561
  2028  0012DA  EF71  F009         	goto	u560
  2029  0012DE                     u561:
  2030  0012DE  EF7A  F009         	goto	l1340
  2031  0012E2                     u560:
  2032  0012E2  5003               	movf	fputc@fp^0,w,c
  2033  0012E4  1004               	iorwf	(fputc@fp+1)^0,w,c
  2034  0012E6  A4D8               	btfss	status,2,c
  2035  0012E8  EF78  F009         	goto	u571
  2036  0012EC  EF7A  F009         	goto	u570
  2037  0012F0                     u571:
  2038  0012F0  EF7F  F009         	goto	l1342
  2039  0012F4                     u570:
  2040  0012F4                     l1340:
  2041  0012F4  5001               	movf	fputc@c^0,w,c
  2042  0012F6  ECA6  F00B         	call	_putch
  2043  0012FA  EFCC  F009         	goto	l851
  2044  0012FE                     l1342:
  2045  0012FE  EE20 F004          	lfsr	2,4
  2046  001302  5003               	movf	fputc@fp^0,w,c
  2047  001304  26D9               	addwf	fsr2l,f,c
  2048  001306  5004               	movf	(fputc@fp+1)^0,w,c
  2049  001308  22DA               	addwfc	fsr2h,f,c
  2050  00130A  50DE               	movf	postinc2,w,c
  2051  00130C  10DE               	iorwf	postinc2,w,c
  2052  00130E  B4D8               	btfsc	status,2,c
  2053  001310  EF8C  F009         	goto	u581
  2054  001314  EF8E  F009         	goto	u580
  2055  001318                     u581:
  2056  001318  EFA9  F009         	goto	l1346
  2057  00131C                     u580:
  2058  00131C  EE20 F004          	lfsr	2,4
  2059  001320  5003               	movf	fputc@fp^0,w,c
  2060  001322  26D9               	addwf	fsr2l,f,c
  2061  001324  5004               	movf	(fputc@fp+1)^0,w,c
  2062  001326  22DA               	addwfc	fsr2h,f,c
  2063  001328  EE10 F002          	lfsr	1,2
  2064  00132C  5003               	movf	fputc@fp^0,w,c
  2065  00132E  26E1               	addwf	fsr1l,f,c
  2066  001330  5004               	movf	(fputc@fp+1)^0,w,c
  2067  001332  22E2               	addwfc	fsr1h,f,c
  2068  001334  50DE               	movf	postinc2,w,c
  2069  001336  5CE6               	subwf	postinc1,w,c
  2070  001338  50E6               	movf	postinc1,w,c
  2071  00133A  0A80               	xorlw	128
  2072  00133C  6E09               	movwf	(??_fputc+4)^0,c
  2073  00133E  50DE               	movf	postinc2,w,c
  2074  001340  0A80               	xorlw	128
  2075  001342  5809               	subwfb	(??_fputc+4)^0,w,c
  2076  001344  B0D8               	btfsc	status,0,c
  2077  001346  EFA7  F009         	goto	u591
  2078  00134A  EFA9  F009         	goto	u590
  2079  00134E                     u591:
  2080  00134E  EFCC  F009         	goto	l851
  2081  001352                     u590:
  2082  001352                     l1346:
  2083  001352  EE20 F002          	lfsr	2,2
  2084  001356  5003               	movf	fputc@fp^0,w,c
  2085  001358  26D9               	addwf	fsr2l,f,c
  2086  00135A  5004               	movf	(fputc@fp+1)^0,w,c
  2087  00135C  22DA               	addwfc	fsr2h,f,c
  2088  00135E  CFDE F005          	movff	postinc2,??_fputc
  2089  001362  CFDD F006          	movff	postdec2,??_fputc+1
  2090  001366  C003  FFD9         	movff	fputc@fp,fsr2l
  2091  00136A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2092  00136E  CFDE F007          	movff	postinc2,??_fputc+2
  2093  001372  CFDD F008          	movff	postdec2,??_fputc+3
  2094  001376  5005               	movf	??_fputc^0,w,c
  2095  001378  2407               	addwf	(??_fputc+2)^0,w,c
  2096  00137A  6ED9               	movwf	fsr2l,c
  2097  00137C  5006               	movf	(??_fputc+1)^0,w,c
  2098  00137E  2008               	addwfc	(??_fputc+3)^0,w,c
  2099  001380  6EDA               	movwf	fsr2h,c
  2100  001382  C001  FFDF         	movff	fputc@c,indf2
  2101  001386  EE20 F002          	lfsr	2,2
  2102  00138A  5003               	movf	fputc@fp^0,w,c
  2103  00138C  26D9               	addwf	fsr2l,f,c
  2104  00138E  5004               	movf	(fputc@fp+1)^0,w,c
  2105  001390  22DA               	addwfc	fsr2h,f,c
  2106  001392  2ADE               	incf	postinc2,f,c
  2107  001394  0E00               	movlw	0
  2108  001396  22DD               	addwfc	postdec2,f,c
  2109  001398                     l851:
  2110  001398  0012               	return		;funcret
  2111  00139A                     __end_of_fputc:
  2112                           	callstack 0
  2113                           
  2114 ;; *************** function _putch *****************
  2115 ;; Defined at:
  2116 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\putch.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  c               1    wreg     unsigned char 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  c               1    0[COMRAM] unsigned char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		wreg
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2130 ;;      Params:         0       0       0       0       0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2133 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2134 ;;Total ram usage:        0 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_fputc
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text9
  2144  00174C                     __ptext9:
  2145                           	callstack 0
  2146  00174C                     _putch:
  2147                           	callstack 26
  2148  00174C  0012               	return		;funcret
  2149  00174E                     __end_of_putch:
  2150                           	callstack 0
  2151                           
  2152 ;; *************** function _abs *****************
  2153 ;; Defined at:
  2154 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\abs.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  a               2   18[COMRAM] int 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  2   18[COMRAM] int 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2168 ;;      Params:         2       0       0       0       0       0       0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2170 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2171 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2172 ;;Total ram usage:        4 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_dtoa
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text10
  2182  001678                     __ptext10:
  2183                           	callstack 0
  2184  001678                     _abs:
  2185                           	callstack 26
  2186  001678  BE14               	btfsc	(abs@a+1)^0,7,c
  2187  00167A  EF49  F00B         	goto	u790
  2188  00167E  5014               	movf	(abs@a+1)^0,w,c
  2189  001680  E106               	bnz	u791
  2190  001682  0413               	decf	abs@a^0,w,c
  2191  001684  B0D8               	btfsc	status,0,c
  2192  001686  EF47  F00B         	goto	u791
  2193  00168A  EF49  F00B         	goto	u790
  2194  00168E                     u791:
  2195  00168E  EF57  F00B         	goto	l836
  2196  001692                     u790:
  2197  001692  C013  F015         	movff	abs@a,??_abs
  2198  001696  C014  F016         	movff	abs@a+1,??_abs+1
  2199  00169A  1E15               	comf	??_abs^0,f,c
  2200  00169C  1E16               	comf	(??_abs+1)^0,f,c
  2201  00169E  4A15               	infsnz	??_abs^0,f,c
  2202  0016A0  2A16               	incf	(??_abs+1)^0,f,c
  2203  0016A2  C015  F013         	movff	??_abs,?_abs
  2204  0016A6  C016  F014         	movff	??_abs+1,?_abs+1
  2205  0016AA  EF5B  F00B         	goto	l839
  2206  0016AE                     l836:
  2207  0016AE  C013  F013         	movff	abs@a,?_abs
  2208  0016B2  C014  F014         	movff	abs@a+1,?_abs+1
  2209  0016B6                     l839:
  2210  0016B6  0012               	return		;funcret
  2211  0016B8                     __end_of_abs:
  2212                           	callstack 0
  2213                           
  2214 ;; *************** function ___aomod *****************
  2215 ;; Defined at:
  2216 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aomod.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  dividend        8    0[COMRAM] long long 
  2219 ;;  divisor         8    8[COMRAM] long long 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  sign            1   17[COMRAM] unsigned char 
  2222 ;;  counter         1   16[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  8    0[COMRAM] long long 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2232 ;;      Params:        16       0       0       0       0       0       0       0       0
  2233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2235 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2236 ;;Total ram usage:       18 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_dtoa
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text11
  2246  00108E                     __ptext11:
  2247                           	callstack 0
  2248  00108E                     ___aomod:
  2249                           	callstack 26
  2250  00108E  0E00               	movlw	0
  2251  001090  6E12               	movwf	___aomod@sign^0,c
  2252  001092  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2253  001094  EF50  F008         	goto	u690
  2254  001098  EF4E  F008         	goto	u691
  2255  00109C                     u691:
  2256  00109C  EF62  F008         	goto	l1420
  2257  0010A0                     u690:
  2258  0010A0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2259  0010A2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2260  0010A4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2261  0010A6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2262  0010A8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2263  0010AA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2264  0010AC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2265  0010AE  6C01               	negf	___aomod@dividend^0,c
  2266  0010B0  0E00               	movlw	0
  2267  0010B2  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2268  0010B4  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2269  0010B6  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2270  0010B8  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2271  0010BA  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2272  0010BC  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2273  0010BE  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2274  0010C0  0E01               	movlw	1
  2275  0010C2  6E12               	movwf	___aomod@sign^0,c
  2276  0010C4                     l1420:
  2277  0010C4  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2278  0010C6  EF69  F008         	goto	u700
  2279  0010CA  EF67  F008         	goto	u701
  2280  0010CE                     u701:
  2281  0010CE  EF79  F008         	goto	l1424
  2282  0010D2                     u700:
  2283  0010D2  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2284  0010D4  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2285  0010D6  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2286  0010D8  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2287  0010DA  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2288  0010DC  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2289  0010DE  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2290  0010E0  6C09               	negf	___aomod@divisor^0,c
  2291  0010E2  0E00               	movlw	0
  2292  0010E4  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2293  0010E6  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2294  0010E8  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2295  0010EA  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2296  0010EC  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2297  0010EE  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2298  0010F0  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2299  0010F2                     l1424:
  2300  0010F2  5009               	movf	___aomod@divisor^0,w,c
  2301  0010F4  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2302  0010F6  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2303  0010F8  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2304  0010FA  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2305  0010FC  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2306  0010FE  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2307  001100  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2308  001102  B4D8               	btfsc	status,2,c
  2309  001104  EF86  F008         	goto	u711
  2310  001108  EF88  F008         	goto	u710
  2311  00110C                     u711:
  2312  00110C  EFD0  F008         	goto	l1440
  2313  001110                     u710:
  2314  001110  0E01               	movlw	1
  2315  001112  6E11               	movwf	___aomod@counter^0,c
  2316  001114  EF96  F008         	goto	l1430
  2317  001118                     l1428:
  2318  001118  90D8               	bcf	status,0,c
  2319  00111A  3609               	rlcf	___aomod@divisor^0,f,c
  2320  00111C  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2321  00111E  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2322  001120  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2323  001122  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2324  001124  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2325  001126  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2326  001128  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2327  00112A  2A11               	incf	___aomod@counter^0,f,c
  2328  00112C                     l1430:
  2329  00112C  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2330  00112E  EF9B  F008         	goto	u721
  2331  001132  EF9D  F008         	goto	u720
  2332  001136                     u721:
  2333  001136  EF8C  F008         	goto	l1428
  2334  00113A                     u720:
  2335  00113A                     l1432:
  2336  00113A  5009               	movf	___aomod@divisor^0,w,c
  2337  00113C  5C01               	subwf	___aomod@dividend^0,w,c
  2338  00113E  500A               	movf	(___aomod@divisor+1)^0,w,c
  2339  001140  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2340  001142  500B               	movf	(___aomod@divisor+2)^0,w,c
  2341  001144  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2342  001146  500C               	movf	(___aomod@divisor+3)^0,w,c
  2343  001148  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2344  00114A  500D               	movf	(___aomod@divisor+4)^0,w,c
  2345  00114C  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2346  00114E  500E               	movf	(___aomod@divisor+5)^0,w,c
  2347  001150  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2348  001152  500F               	movf	(___aomod@divisor+6)^0,w,c
  2349  001154  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2350  001156  5010               	movf	(___aomod@divisor+7)^0,w,c
  2351  001158  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2352  00115A  A0D8               	btfss	status,0,c
  2353  00115C  EFB2  F008         	goto	u731
  2354  001160  EFB4  F008         	goto	u730
  2355  001164                     u731:
  2356  001164  EFC4  F008         	goto	l1436
  2357  001168                     u730:
  2358  001168  5009               	movf	___aomod@divisor^0,w,c
  2359  00116A  5E01               	subwf	___aomod@dividend^0,f,c
  2360  00116C  500A               	movf	(___aomod@divisor+1)^0,w,c
  2361  00116E  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2362  001170  500B               	movf	(___aomod@divisor+2)^0,w,c
  2363  001172  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2364  001174  500C               	movf	(___aomod@divisor+3)^0,w,c
  2365  001176  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2366  001178  500D               	movf	(___aomod@divisor+4)^0,w,c
  2367  00117A  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2368  00117C  500E               	movf	(___aomod@divisor+5)^0,w,c
  2369  00117E  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2370  001180  500F               	movf	(___aomod@divisor+6)^0,w,c
  2371  001182  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2372  001184  5010               	movf	(___aomod@divisor+7)^0,w,c
  2373  001186  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2374  001188                     l1436:
  2375  001188  90D8               	bcf	status,0,c
  2376  00118A  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2377  00118C  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2378  00118E  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2379  001190  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2380  001192  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2381  001194  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2382  001196  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2383  001198  3209               	rrcf	___aomod@divisor^0,f,c
  2384  00119A  2E11               	decfsz	___aomod@counter^0,f,c
  2385  00119C  EF9D  F008         	goto	l1432
  2386  0011A0                     l1440:
  2387  0011A0  5012               	movf	___aomod@sign^0,w,c
  2388  0011A2  B4D8               	btfsc	status,2,c
  2389  0011A4  EFD6  F008         	goto	u741
  2390  0011A8  EFD8  F008         	goto	u740
  2391  0011AC                     u741:
  2392  0011AC  EFE8  F008         	goto	l1444
  2393  0011B0                     u740:
  2394  0011B0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2395  0011B2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2396  0011B4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2397  0011B6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2398  0011B8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2399  0011BA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2400  0011BC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2401  0011BE  6C01               	negf	___aomod@dividend^0,c
  2402  0011C0  0E00               	movlw	0
  2403  0011C2  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2404  0011C4  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2405  0011C6  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2406  0011C8  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2407  0011CA  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2408  0011CC  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2409  0011CE  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2410  0011D0                     l1444:
  2411  0011D0  C001  F001         	movff	___aomod@dividend,?___aomod
  2412  0011D4  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2413  0011D8  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2414  0011DC  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2415  0011E0  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2416  0011E4  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2417  0011E8  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2418  0011EC  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2419  0011F0  0012               	return		;funcret
  2420  0011F2                     __end_of___aomod:
  2421                           	callstack 0
  2422                           
  2423 ;; *************** function ___aodiv *****************
  2424 ;; Defined at:
  2425 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aodiv.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  dividend        8    0[COMRAM] long long 
  2428 ;;  divisor         8    8[COMRAM] long long 
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;  quotient        8   18[COMRAM] long long 
  2431 ;;  sign            1   17[COMRAM] unsigned char 
  2432 ;;  counter         1   16[COMRAM] unsigned char 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  8    0[COMRAM] long long 
  2435 ;; Registers used:
  2436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2442 ;;      Params:        16       0       0       0       0       0       0       0       0
  2443 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2445 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2446 ;;Total ram usage:       26 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_dtoa
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text12
  2456  000F06                     __ptext12:
  2457                           	callstack 0
  2458  000F06                     ___aodiv:
  2459                           	callstack 26
  2460  000F06  0E00               	movlw	0
  2461  000F08  6E12               	movwf	___aodiv@sign^0,c
  2462  000F0A  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2463  000F0C  EF8C  F007         	goto	u620
  2464  000F10  EF8A  F007         	goto	u621
  2465  000F14                     u621:
  2466  000F14  EF9E  F007         	goto	l1376
  2467  000F18                     u620:
  2468  000F18  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2469  000F1A  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2470  000F1C  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2471  000F1E  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2472  000F20  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2473  000F22  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2474  000F24  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2475  000F26  6C09               	negf	___aodiv@divisor^0,c
  2476  000F28  0E00               	movlw	0
  2477  000F2A  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2478  000F2C  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2479  000F2E  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2480  000F30  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2481  000F32  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2482  000F34  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2483  000F36  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2484  000F38  0E01               	movlw	1
  2485  000F3A  6E12               	movwf	___aodiv@sign^0,c
  2486  000F3C                     l1376:
  2487  000F3C  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2488  000F3E  EFA5  F007         	goto	u630
  2489  000F42  EFA3  F007         	goto	u631
  2490  000F46                     u631:
  2491  000F46  EFB7  F007         	goto	l1382
  2492  000F4A                     u630:
  2493  000F4A  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2494  000F4C  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2495  000F4E  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2496  000F50  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2497  000F52  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2498  000F54  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2499  000F56  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2500  000F58  6C01               	negf	___aodiv@dividend^0,c
  2501  000F5A  0E00               	movlw	0
  2502  000F5C  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2503  000F5E  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2504  000F60  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2505  000F62  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2506  000F64  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2507  000F66  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2508  000F68  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2509  000F6A  0E01               	movlw	1
  2510  000F6C  1A12               	xorwf	___aodiv@sign^0,f,c
  2511  000F6E                     l1382:
  2512  000F6E  EE20  F013         	lfsr	2,___aodiv@quotient
  2513  000F72  0E07               	movlw	7
  2514  000F74                     u641:
  2515  000F74  6ADE               	clrf	postinc2,c
  2516  000F76  06E8               	decf	wreg,f,c
  2517  000F78  E2FD               	bc	u641
  2518  000F7A  5009               	movf	___aodiv@divisor^0,w,c
  2519  000F7C  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2520  000F7E  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2521  000F80  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2522  000F82  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2523  000F84  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2524  000F86  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2525  000F88  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2526  000F8A  B4D8               	btfsc	status,2,c
  2527  000F8C  EFCA  F007         	goto	u651
  2528  000F90  EFCC  F007         	goto	u650
  2529  000F94                     u651:
  2530  000F94  EF1E  F008         	goto	l1404
  2531  000F98                     u650:
  2532  000F98  0E01               	movlw	1
  2533  000F9A  6E11               	movwf	___aodiv@counter^0,c
  2534  000F9C  EFDA  F007         	goto	l1390
  2535  000FA0                     l1388:
  2536  000FA0  90D8               	bcf	status,0,c
  2537  000FA2  3609               	rlcf	___aodiv@divisor^0,f,c
  2538  000FA4  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2539  000FA6  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2540  000FA8  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2541  000FAA  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2542  000FAC  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2543  000FAE  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2544  000FB0  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2545  000FB2  2A11               	incf	___aodiv@counter^0,f,c
  2546  000FB4                     l1390:
  2547  000FB4  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2548  000FB6  EFDF  F007         	goto	u661
  2549  000FBA  EFE1  F007         	goto	u660
  2550  000FBE                     u661:
  2551  000FBE  EFD0  F007         	goto	l1388
  2552  000FC2                     u660:
  2553  000FC2                     l1392:
  2554  000FC2  90D8               	bcf	status,0,c
  2555  000FC4  3613               	rlcf	___aodiv@quotient^0,f,c
  2556  000FC6  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2557  000FC8  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2558  000FCA  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2559  000FCC  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2560  000FCE  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2561  000FD0  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2562  000FD2  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2563  000FD4  5009               	movf	___aodiv@divisor^0,w,c
  2564  000FD6  5C01               	subwf	___aodiv@dividend^0,w,c
  2565  000FD8  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2566  000FDA  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2567  000FDC  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2568  000FDE  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2569  000FE0  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2570  000FE2  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2571  000FE4  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2572  000FE6  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2573  000FE8  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2574  000FEA  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2575  000FEC  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2576  000FEE  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2577  000FF0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2578  000FF2  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2579  000FF4  A0D8               	btfss	status,0,c
  2580  000FF6  EFFF  F007         	goto	u671
  2581  000FFA  EF01  F008         	goto	u670
  2582  000FFE                     u671:
  2583  000FFE  EF12  F008         	goto	l1400
  2584  001002                     u670:
  2585  001002  5009               	movf	___aodiv@divisor^0,w,c
  2586  001004  5E01               	subwf	___aodiv@dividend^0,f,c
  2587  001006  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2588  001008  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2589  00100A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2590  00100C  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2591  00100E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2592  001010  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2593  001012  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2594  001014  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2595  001016  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2596  001018  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2597  00101A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2598  00101C  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2599  00101E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2600  001020  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2601  001022  8013               	bsf	___aodiv@quotient^0,0,c
  2602  001024                     l1400:
  2603  001024  90D8               	bcf	status,0,c
  2604  001026  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2605  001028  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2606  00102A  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2607  00102C  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2608  00102E  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2609  001030  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2610  001032  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2611  001034  3209               	rrcf	___aodiv@divisor^0,f,c
  2612  001036  2E11               	decfsz	___aodiv@counter^0,f,c
  2613  001038  EFE1  F007         	goto	l1392
  2614  00103C                     l1404:
  2615  00103C  5012               	movf	___aodiv@sign^0,w,c
  2616  00103E  B4D8               	btfsc	status,2,c
  2617  001040  EF24  F008         	goto	u681
  2618  001044  EF26  F008         	goto	u680
  2619  001048                     u681:
  2620  001048  EF36  F008         	goto	l1408
  2621  00104C                     u680:
  2622  00104C  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2623  00104E  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2624  001050  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2625  001052  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2626  001054  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2627  001056  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2628  001058  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2629  00105A  6C13               	negf	___aodiv@quotient^0,c
  2630  00105C  0E00               	movlw	0
  2631  00105E  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2632  001060  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2633  001062  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2634  001064  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2635  001066  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2636  001068  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2637  00106A  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2638  00106C                     l1408:
  2639  00106C  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2640  001070  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2641  001074  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2642  001078  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2643  00107C  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2644  001080  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2645  001084  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2646  001088  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2647  00108C  0012               	return		;funcret
  2648  00108E                     __end_of___aodiv:
  2649                           	callstack 0
  2650                           
  2651 ;; *************** function _LCD_gotoXY *****************
  2652 ;; Defined at:
  2653 ;;		line 87 in file "MiLCD.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  x               2    2[COMRAM] int 
  2656 ;;  y               2    4[COMRAM] int 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2668 ;;      Params:         4       0       0       0       0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2670 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2671 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2672 ;;Total ram usage:        5 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    1
  2675 ;; This function calls:
  2676 ;;		_LCD_Comando
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text13
  2683  0016B8                     __ptext13:
  2684                           	callstack 0
  2685  0016B8                     _LCD_gotoXY:
  2686                           	callstack 29
  2687  0016B8                     
  2688                           ;MiLCD.c: 87: void LCD_gotoXY (int x,int y);MiLCD.c: 88: { _delay((unsigned long)((150)*
      +                          (48000000/4000000.0)));
  2689  0016B8  0E03               	movlw	3
  2690  0016BA  6E07               	movwf	??_LCD_gotoXY^0,c
  2691  0016BC  0E55               	movlw	85
  2692  0016BE                     u1167:
  2693  0016BE  2EE8               	decfsz	wreg,f,c
  2694  0016C0  D7FE               	bra	u1167
  2695  0016C2  2E07               	decfsz	??_LCD_gotoXY^0,f,c
  2696  0016C4  D7FC               	bra	u1167
  2697  0016C6  F000               	nop	
  2698  0016C8                     
  2699                           ;MiLCD.c: 90:     if ( x>0 )
  2700  0016C8  BE04               	btfsc	(LCD_gotoXY@x+1)^0,7,c
  2701  0016CA  EF6F  F00B         	goto	u1001
  2702  0016CE  5004               	movf	(LCD_gotoXY@x+1)^0,w,c
  2703  0016D0  E108               	bnz	u1000
  2704  0016D2  0403               	decf	LCD_gotoXY@x^0,w,c
  2705  0016D4  A0D8               	btfss	status,0,c
  2706  0016D6  EF6F  F00B         	goto	u1001
  2707  0016DA  EF71  F00B         	goto	u1000
  2708  0016DE                     u1001:
  2709  0016DE  EF77  F00B         	goto	l1716
  2710  0016E2                     u1000:
  2711  0016E2                     
  2712                           ;MiLCD.c: 91:     {;MiLCD.c: 92:         LCD_Comando((0xC0)+y);
  2713  0016E2  5005               	movf	LCD_gotoXY@y^0,w,c
  2714  0016E4  0FC0               	addlw	192
  2715  0016E6  EC98  F00A         	call	_LCD_Comando
  2716                           
  2717                           ;MiLCD.c: 93:     }
  2718  0016EA  EF7B  F00B         	goto	l70
  2719  0016EE                     l1716:
  2720                           
  2721                           ;MiLCD.c: 95:     {;MiLCD.c: 96:         LCD_Comando((0x80)+y);
  2722  0016EE  5005               	movf	LCD_gotoXY@y^0,w,c
  2723  0016F0  0F80               	addlw	128
  2724  0016F2  EC98  F00A         	call	_LCD_Comando
  2725  0016F6                     l70:
  2726  0016F6  0012               	return		;funcret
  2727  0016F8                     __end_of_LCD_gotoXY:
  2728                           	callstack 0
  2729                           
  2730 ;; *************** function _LCD_Init *****************
  2731 ;; Defined at:
  2732 ;;		line 18 in file "MiLCD.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2746 ;;      Params:         0       0       0       0       0       0       0       0       0
  2747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2748 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2749 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2750 ;;Total ram usage:        1 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    1
  2753 ;; This function calls:
  2754 ;;		_LCD_Comando
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text14
  2761  0011F2                     __ptext14:
  2762                           	callstack 0
  2763  0011F2                     _LCD_Init:
  2764                           	callstack 29
  2765  0011F2                     
  2766                           ;MiLCD.c: 21:    TRISDbits.TRISD6 =0;
  2767  0011F2  9C95               	bcf	149,6,c	;volatile
  2768                           
  2769                           ;MiLCD.c: 22:    TRISDbits.TRISD5 =0;
  2770  0011F4  9A95               	bcf	149,5,c	;volatile
  2771                           
  2772                           ;MiLCD.c: 23:    TRISDbits.TRISD4 =0;
  2773  0011F6  9895               	bcf	149,4,c	;volatile
  2774  0011F8                     
  2775                           ;MiLCD.c: 24:    PORTD &= 0xf0;
  2776  0011F8  0EF0               	movlw	240
  2777  0011FA  1683               	andwf	131,f,c	;volatile
  2778                           
  2779                           ;MiLCD.c: 25:    TRISD &= 0xf0;
  2780  0011FC  0EF0               	movlw	240
  2781  0011FE  1695               	andwf	149,f,c	;volatile
  2782  001200                     
  2783                           ;MiLCD.c: 26:    LATDbits.LATD6 = 0;
  2784  001200  9C8C               	bcf	140,6,c	;volatile
  2785  001202                     
  2786                           ;MiLCD.c: 27:    LATDbits.LATD5 = 0;
  2787  001202  9A8C               	bcf	140,5,c	;volatile
  2788  001204                     
  2789                           ;MiLCD.c: 28:    LATDbits.LATD4 = 0;
  2790  001204  988C               	bcf	140,4,c	;volatile
  2791  001206                     
  2792                           ;MiLCD.c: 29:    _delay((unsigned long)((15)*(48000000/4000.0)));
  2793  001206  0EEA               	movlw	234
  2794  001208  6E03               	movwf	??_LCD_Init^0,c
  2795  00120A  0EC3               	movlw	195
  2796  00120C                     u1177:
  2797  00120C  2EE8               	decfsz	wreg,f,c
  2798  00120E  D7FE               	bra	u1177
  2799  001210  2E03               	decfsz	??_LCD_Init^0,f,c
  2800  001212  D7FC               	bra	u1177
  2801  001214  F000               	nop	
  2802  001216                     
  2803                           ;MiLCD.c: 31:    LCD_Comando (0x30);
  2804  001216  0E30               	movlw	48
  2805  001218  EC98  F00A         	call	_LCD_Comando
  2806  00121C                     
  2807                           ;MiLCD.c: 32:    _delay((unsigned long)((5)*(48000000/4000.0)));
  2808  00121C  0E4E               	movlw	78
  2809  00121E  6E03               	movwf	??_LCD_Init^0,c
  2810  001220  0EEB               	movlw	235
  2811  001222                     u1187:
  2812  001222  2EE8               	decfsz	wreg,f,c
  2813  001224  D7FE               	bra	u1187
  2814  001226  2E03               	decfsz	??_LCD_Init^0,f,c
  2815  001228  D7FC               	bra	u1187
  2816  00122A  F000               	nop	
  2817  00122C                     
  2818                           ;MiLCD.c: 33:    LCD_Comando (0x30);
  2819  00122C  0E30               	movlw	48
  2820  00122E  EC98  F00A         	call	_LCD_Comando
  2821  001232                     
  2822                           ;MiLCD.c: 34:    _delay((unsigned long)((100)*(48000000/4000000.0)));
  2823  001232  0EF0               	movlw	240
  2824  001234                     u1197:
  2825  001234  D000               	nop2	
  2826  001236  2EE8               	decfsz	wreg,f,c
  2827  001238  D7FD               	bra	u1197
  2828  00123A                     
  2829                           ;MiLCD.c: 35:    LCD_Comando (0x32);
  2830  00123A  0E32               	movlw	50
  2831  00123C  EC98  F00A         	call	_LCD_Comando
  2832  001240                     
  2833                           ;MiLCD.c: 36:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2834  001240  0E03               	movlw	3
  2835  001242  6E03               	movwf	??_LCD_Init^0,c
  2836  001244  0E55               	movlw	85
  2837  001246                     u1207:
  2838  001246  2EE8               	decfsz	wreg,f,c
  2839  001248  D7FE               	bra	u1207
  2840  00124A  2E03               	decfsz	??_LCD_Init^0,f,c
  2841  00124C  D7FC               	bra	u1207
  2842  00124E  F000               	nop	
  2843  001250                     
  2844                           ;MiLCD.c: 37:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2845  001250  0E03               	movlw	3
  2846  001252  6E03               	movwf	??_LCD_Init^0,c
  2847  001254  0E55               	movlw	85
  2848  001256                     u1217:
  2849  001256  2EE8               	decfsz	wreg,f,c
  2850  001258  D7FE               	bra	u1217
  2851  00125A  2E03               	decfsz	??_LCD_Init^0,f,c
  2852  00125C  D7FC               	bra	u1217
  2853  00125E  F000               	nop	
  2854  001260                     
  2855                           ;MiLCD.c: 38:    LCD_Comando (0x28);
  2856  001260  0E28               	movlw	40
  2857  001262  EC98  F00A         	call	_LCD_Comando
  2858  001266                     
  2859                           ;MiLCD.c: 39:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2860  001266  0E03               	movlw	3
  2861  001268  6E03               	movwf	??_LCD_Init^0,c
  2862  00126A  0E55               	movlw	85
  2863  00126C                     u1227:
  2864  00126C  2EE8               	decfsz	wreg,f,c
  2865  00126E  D7FE               	bra	u1227
  2866  001270  2E03               	decfsz	??_LCD_Init^0,f,c
  2867  001272  D7FC               	bra	u1227
  2868  001274  F000               	nop	
  2869  001276                     
  2870                           ;MiLCD.c: 40:    LCD_Comando (0x08);
  2871  001276  0E08               	movlw	8
  2872  001278  EC98  F00A         	call	_LCD_Comando
  2873  00127C                     
  2874                           ;MiLCD.c: 41:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2875  00127C  0E03               	movlw	3
  2876  00127E  6E03               	movwf	??_LCD_Init^0,c
  2877  001280  0E55               	movlw	85
  2878  001282                     u1237:
  2879  001282  2EE8               	decfsz	wreg,f,c
  2880  001284  D7FE               	bra	u1237
  2881  001286  2E03               	decfsz	??_LCD_Init^0,f,c
  2882  001288  D7FC               	bra	u1237
  2883  00128A  F000               	nop	
  2884  00128C                     
  2885                           ;MiLCD.c: 43:    LCD_Comando (0x01);
  2886  00128C  0E01               	movlw	1
  2887  00128E  EC98  F00A         	call	_LCD_Comando
  2888  001292                     
  2889                           ;MiLCD.c: 44:    _delay((unsigned long)((5)*(48000000/4000.0)));
  2890  001292  0E4E               	movlw	78
  2891  001294  6E03               	movwf	??_LCD_Init^0,c
  2892  001296  0EEB               	movlw	235
  2893  001298                     u1247:
  2894  001298  2EE8               	decfsz	wreg,f,c
  2895  00129A  D7FE               	bra	u1247
  2896  00129C  2E03               	decfsz	??_LCD_Init^0,f,c
  2897  00129E  D7FC               	bra	u1247
  2898  0012A0  F000               	nop	
  2899  0012A2                     
  2900                           ;MiLCD.c: 46:    LCD_Comando (0x06);
  2901  0012A2  0E06               	movlw	6
  2902  0012A4  EC98  F00A         	call	_LCD_Comando
  2903  0012A8                     
  2904                           ;MiLCD.c: 47:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2905  0012A8  0E03               	movlw	3
  2906  0012AA  6E03               	movwf	??_LCD_Init^0,c
  2907  0012AC  0E55               	movlw	85
  2908  0012AE                     u1257:
  2909  0012AE  2EE8               	decfsz	wreg,f,c
  2910  0012B0  D7FE               	bra	u1257
  2911  0012B2  2E03               	decfsz	??_LCD_Init^0,f,c
  2912  0012B4  D7FC               	bra	u1257
  2913  0012B6  F000               	nop	
  2914  0012B8                     
  2915                           ;MiLCD.c: 48:    LCD_Comando (0x0C);
  2916  0012B8  0E0C               	movlw	12
  2917  0012BA  EC98  F00A         	call	_LCD_Comando
  2918  0012BE                     
  2919                           ;MiLCD.c: 49:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  2920  0012BE  0E03               	movlw	3
  2921  0012C0  6E03               	movwf	??_LCD_Init^0,c
  2922  0012C2  0E55               	movlw	85
  2923  0012C4                     u1267:
  2924  0012C4  2EE8               	decfsz	wreg,f,c
  2925  0012C6  D7FE               	bra	u1267
  2926  0012C8  2E03               	decfsz	??_LCD_Init^0,f,c
  2927  0012CA  D7FC               	bra	u1267
  2928  0012CC  F000               	nop	
  2929  0012CE  0012               	return		;funcret
  2930  0012D0                     __end_of_LCD_Init:
  2931                           	callstack 0
  2932                           
  2933 ;; *************** function _LCD_Comando *****************
  2934 ;; Defined at:
  2935 ;;		line 54 in file "MiLCD.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  cmd             1    wreg     unsigned char 
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  cmd             1    1[COMRAM] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0
  2950 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2951 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2952 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2953 ;;Total ram usage:        2 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_LCD_Init
  2959 ;;		_LCD_gotoXY
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text15
  2964  001530                     __ptext15:
  2965                           	callstack 0
  2966  001530                     _LCD_Comando:
  2967                           	callstack 29
  2968                           
  2969                           ;incstack = 0
  2970                           ;LCD_Comando@cmd stored from wreg
  2971  001530  6E02               	movwf	LCD_Comando@cmd^0,c
  2972  001532                     
  2973                           ;MiLCD.c: 54: void LCD_Comando (unsigned char cmd);MiLCD.c: 55: { _delay((unsigned long)
      +                          ((150)*(48000000/4000000.0)));
  2974  001532  0E03               	movlw	3
  2975  001534  6E01               	movwf	??_LCD_Comando^0,c
  2976  001536  0E55               	movlw	85
  2977  001538                     u1277:
  2978  001538  2EE8               	decfsz	wreg,f,c
  2979  00153A  D7FE               	bra	u1277
  2980  00153C  2E01               	decfsz	??_LCD_Comando^0,f,c
  2981  00153E  D7FC               	bra	u1277
  2982  001540  F000               	nop	
  2983  001542                     
  2984                           ;MiLCD.c: 57:     TRISD &= 0xf0;
  2985  001542  0EF0               	movlw	240
  2986  001544  1695               	andwf	149,f,c	;volatile
  2987  001546                     
  2988                           ;MiLCD.c: 58:     PORTD &= 0xf0;
  2989  001546  0EF0               	movlw	240
  2990  001548  1683               	andwf	131,f,c	;volatile
  2991  00154A                     
  2992                           ;MiLCD.c: 61:     PORTD = PORTD | ((cmd>>4)& 0x0f);
  2993  00154A  3802               	swapf	LCD_Comando@cmd^0,w,c
  2994  00154C  0B0F               	andlw	15
  2995  00154E  0B0F               	andlw	15
  2996  001550  1083               	iorwf	131,w,c	;volatile
  2997  001552  6E83               	movwf	131,c	;volatile
  2998  001554                     
  2999                           ;MiLCD.c: 64:     LATDbits.LATD6 = 0;
  3000  001554  9C8C               	bcf	140,6,c	;volatile
  3001  001556                     
  3002                           ;MiLCD.c: 65:     LATDbits.LATD5 = 0;
  3003  001556  9A8C               	bcf	140,5,c	;volatile
  3004  001558                     
  3005                           ;MiLCD.c: 67:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3006  001558  0E3C               	movlw	60
  3007  00155A                     u1287:
  3008  00155A  2EE8               	decfsz	wreg,f,c
  3009  00155C  D7FE               	bra	u1287
  3010  00155E                     
  3011                           ;MiLCD.c: 68:     LATDbits.LATD4 = 1;
  3012  00155E  888C               	bsf	140,4,c	;volatile
  3013  001560                     
  3014                           ;MiLCD.c: 69:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3015  001560  0E3C               	movlw	60
  3016  001562                     u1297:
  3017  001562  2EE8               	decfsz	wreg,f,c
  3018  001564  D7FE               	bra	u1297
  3019  001566                     
  3020                           ;MiLCD.c: 70:     LATDbits.LATD4 = 0;
  3021  001566  988C               	bcf	140,4,c	;volatile
  3022  001568                     
  3023                           ;MiLCD.c: 74:     PORTD &= 0xf0;
  3024  001568  0EF0               	movlw	240
  3025  00156A  1683               	andwf	131,f,c	;volatile
  3026  00156C                     
  3027                           ;MiLCD.c: 75:     PORTD = PORTD | (cmd & 0x0f);
  3028  00156C  5002               	movf	LCD_Comando@cmd^0,w,c
  3029  00156E  0B0F               	andlw	15
  3030  001570  1083               	iorwf	131,w,c	;volatile
  3031  001572  6E83               	movwf	131,c	;volatile
  3032  001574                     
  3033                           ;MiLCD.c: 76:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3034  001574  0E3C               	movlw	60
  3035  001576                     u1307:
  3036  001576  2EE8               	decfsz	wreg,f,c
  3037  001578  D7FE               	bra	u1307
  3038  00157A                     
  3039                           ;MiLCD.c: 77:     LATDbits.LATD4 = 1;
  3040  00157A  888C               	bsf	140,4,c	;volatile
  3041  00157C                     
  3042                           ;MiLCD.c: 78:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3043  00157C  0E3C               	movlw	60
  3044  00157E                     u1317:
  3045  00157E  2EE8               	decfsz	wreg,f,c
  3046  001580  D7FE               	bra	u1317
  3047  001582                     
  3048                           ;MiLCD.c: 79:     LATDbits.LATD4 = 0;
  3049  001582  988C               	bcf	140,4,c	;volatile
  3050  001584                     
  3051                           ;MiLCD.c: 81:     TRISD |= 0x0f;
  3052  001584  0E0F               	movlw	15
  3053  001586  1295               	iorwf	149,f,c	;volatile
  3054  001588  0012               	return		;funcret
  3055  00158A                     __end_of_LCD_Comando:
  3056                           	callstack 0
  3057                           
  3058 ;; *************** function _LCD_Cadena *****************
  3059 ;; Defined at:
  3060 ;;		line 101 in file "MiLCD.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  dato            2    2[COMRAM] PTR const unsigned char 
  3063 ;;		 -> STR_6(17), cont(10), texto(10), STR_1(17), 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3075 ;;      Params:         2       0       0       0       0       0       0       0       0
  3076 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3077 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3078 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3079 ;;Total ram usage:        3 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    1
  3082 ;; This function calls:
  3083 ;;		_LCD_Data
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text16
  3090  001460                     __ptext16:
  3091                           	callstack 0
  3092  001460                     _LCD_Cadena:
  3093                           	callstack 29
  3094  001460                     
  3095                           ;MiLCD.c: 101: void LCD_Cadena ( const char *dato);MiLCD.c: 102: {;MiLCD.c: 103:     whi
      +                          le (*dato)
  3096  001460  EF4E  F00A         	goto	l1728
  3097  001464                     l1722:
  3098                           
  3099                           ;MiLCD.c: 104:     {;MiLCD.c: 105:        _delay((unsigned long)((150)*(48000000/4000000
      +                          .0)));
  3100  001464  0E03               	movlw	3
  3101  001466  6E05               	movwf	??_LCD_Cadena^0,c
  3102  001468  0E55               	movlw	85
  3103  00146A                     u1327:
  3104  00146A  2EE8               	decfsz	wreg,f,c
  3105  00146C  D7FE               	bra	u1327
  3106  00146E  2E05               	decfsz	??_LCD_Cadena^0,f,c
  3107  001470  D7FC               	bra	u1327
  3108  001472  F000               	nop	
  3109  001474                     
  3110                           ;MiLCD.c: 106:         LCD_Data (*dato);
  3111  001474  C003  FFF6         	movff	LCD_Cadena@dato,tblptrl
  3112  001478  C004  FFF7         	movff	LCD_Cadena@dato+1,tblptrh
  3113  00147C  6AF8               	clrf	tblptru,c
  3114  00147E  0E07               	movlw	(high __ramtop+-1)
  3115  001480  64F7               	cpfsgt	tblptrh,c
  3116  001482  D003               	bra	u1017
  3117  001484  0008               	tblrd		*
  3118  001486  50F5               	movf	tablat,w,c
  3119  001488  D005               	bra	u1010
  3120  00148A                     u1017:
  3121  00148A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3122  00148E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3123  001492  50E7               	movf	indf1,w,c
  3124  001494                     u1010:
  3125  001494  ECC5  F00A         	call	_LCD_Data
  3126  001498                     
  3127                           ;MiLCD.c: 107:         dato++;
  3128  001498  4A03               	infsnz	LCD_Cadena@dato^0,f,c
  3129  00149A  2A04               	incf	(LCD_Cadena@dato+1)^0,f,c
  3130  00149C                     l1728:
  3131                           
  3132                           ;MiLCD.c: 103:     while (*dato)
  3133  00149C  C003  FFF6         	movff	LCD_Cadena@dato,tblptrl
  3134  0014A0  C004  FFF7         	movff	LCD_Cadena@dato+1,tblptrh
  3135  0014A4  6AF8               	clrf	tblptru,c
  3136  0014A6  0E07               	movlw	(high __ramtop+-1)
  3137  0014A8  64F7               	cpfsgt	tblptrh,c
  3138  0014AA  D003               	bra	u1027
  3139  0014AC  0008               	tblrd		*
  3140  0014AE  50F5               	movf	tablat,w,c
  3141  0014B0  D005               	bra	u1020
  3142  0014B2                     u1027:
  3143  0014B2  CFF6 FFE1          	movff	tblptrl,fsr1l
  3144  0014B6  CFF7 FFE2          	movff	tblptrh,fsr1h
  3145  0014BA  50E7               	movf	indf1,w,c
  3146  0014BC                     u1020:
  3147  0014BC  0900               	iorlw	0
  3148  0014BE  A4D8               	btfss	status,2,c
  3149  0014C0  EF64  F00A         	goto	u1031
  3150  0014C4  EF66  F00A         	goto	u1030
  3151  0014C8                     u1031:
  3152  0014C8  EF32  F00A         	goto	l1722
  3153  0014CC                     u1030:
  3154  0014CC  0012               	return		;funcret
  3155  0014CE                     __end_of_LCD_Cadena:
  3156                           	callstack 0
  3157                           
  3158 ;; *************** function _LCD_Data *****************
  3159 ;; Defined at:
  3160 ;;		line 112 in file "MiLCD.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  data            1    wreg     unsigned char 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  data            1    1[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0
  3175 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3176 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3177 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3178 ;;Total ram usage:        2 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_LCD_Cadena
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text17
  3188  00158A                     __ptext17:
  3189                           	callstack 0
  3190  00158A                     _LCD_Data:
  3191                           	callstack 29
  3192                           
  3193                           ;incstack = 0
  3194                           ;LCD_Data@data stored from wreg
  3195  00158A  6E02               	movwf	LCD_Data@data^0,c
  3196  00158C                     
  3197                           ;MiLCD.c: 112: void LCD_Data (char data);MiLCD.c: 113: {;MiLCD.c: 114:    _delay((unsign
      +                          ed long)((150)*(48000000/4000000.0)));
  3198  00158C  0E03               	movlw	3
  3199  00158E  6E01               	movwf	??_LCD_Data^0,c
  3200  001590  0E55               	movlw	85
  3201  001592                     u1337:
  3202  001592  2EE8               	decfsz	wreg,f,c
  3203  001594  D7FE               	bra	u1337
  3204  001596  2E01               	decfsz	??_LCD_Data^0,f,c
  3205  001598  D7FC               	bra	u1337
  3206  00159A  F000               	nop	
  3207  00159C                     
  3208                           ;MiLCD.c: 115:     PORTD &= 0xf0;
  3209  00159C  0EF0               	movlw	240
  3210  00159E  1683               	andwf	131,f,c	;volatile
  3211  0015A0                     
  3212                           ;MiLCD.c: 116:     TRISD &= 0xf0;
  3213  0015A0  0EF0               	movlw	240
  3214  0015A2  1695               	andwf	149,f,c	;volatile
  3215  0015A4                     
  3216                           ;MiLCD.c: 118:     PORTD = PORTD | ((data>>4) & 0x0f);
  3217  0015A4  3802               	swapf	LCD_Data@data^0,w,c
  3218  0015A6  0B0F               	andlw	15
  3219  0015A8  0B0F               	andlw	15
  3220  0015AA  1083               	iorwf	131,w,c	;volatile
  3221  0015AC  6E83               	movwf	131,c	;volatile
  3222  0015AE                     
  3223                           ;MiLCD.c: 120:     LATDbits.LATD5 = 1;
  3224  0015AE  8A8C               	bsf	140,5,c	;volatile
  3225  0015B0                     
  3226                           ;MiLCD.c: 121:     LATDbits.LATD6 = 0;
  3227  0015B0  9C8C               	bcf	140,6,c	;volatile
  3228  0015B2                     
  3229                           ;MiLCD.c: 123:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3230  0015B2  0E3C               	movlw	60
  3231  0015B4                     u1347:
  3232  0015B4  2EE8               	decfsz	wreg,f,c
  3233  0015B6  D7FE               	bra	u1347
  3234  0015B8                     
  3235                           ;MiLCD.c: 124:     LATDbits.LATD4 = 1;
  3236  0015B8  888C               	bsf	140,4,c	;volatile
  3237  0015BA                     
  3238                           ;MiLCD.c: 125:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3239  0015BA  0E3C               	movlw	60
  3240  0015BC                     u1357:
  3241  0015BC  2EE8               	decfsz	wreg,f,c
  3242  0015BE  D7FE               	bra	u1357
  3243  0015C0                     
  3244                           ;MiLCD.c: 126:     LATDbits.LATD4 = 0;
  3245  0015C0  988C               	bcf	140,4,c	;volatile
  3246  0015C2                     
  3247                           ;MiLCD.c: 128:     PORTD &= 0xf0;
  3248  0015C2  0EF0               	movlw	240
  3249  0015C4  1683               	andwf	131,f,c	;volatile
  3250  0015C6                     
  3251                           ;MiLCD.c: 129:     PORTD |= (data&0x0f);
  3252  0015C6  5002               	movf	LCD_Data@data^0,w,c
  3253  0015C8  0B0F               	andlw	15
  3254  0015CA  1283               	iorwf	131,f,c	;volatile
  3255  0015CC                     
  3256                           ;MiLCD.c: 131:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3257  0015CC  0E3C               	movlw	60
  3258  0015CE                     u1367:
  3259  0015CE  2EE8               	decfsz	wreg,f,c
  3260  0015D0  D7FE               	bra	u1367
  3261  0015D2                     
  3262                           ;MiLCD.c: 132:     LATDbits.LATD4 = 1;
  3263  0015D2  888C               	bsf	140,4,c	;volatile
  3264  0015D4                     
  3265                           ;MiLCD.c: 133:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3266  0015D4  0E3C               	movlw	60
  3267  0015D6                     u1377:
  3268  0015D6  2EE8               	decfsz	wreg,f,c
  3269  0015D8  D7FE               	bra	u1377
  3270  0015DA                     
  3271                           ;MiLCD.c: 134:     LATDbits.LATD4 = 0;
  3272  0015DA  988C               	bcf	140,4,c	;volatile
  3273  0015DC                     
  3274                           ;MiLCD.c: 136:     TRISD |= 0x0f;
  3275  0015DC  0E0F               	movlw	15
  3276  0015DE  1295               	iorwf	149,f,c	;volatile
  3277  0015E0  0012               	return		;funcret
  3278  0015E2                     __end_of_LCD_Data:
  3279                           	callstack 0
  3280                           
  3281 ;; *************** function _InitPort *****************
  3282 ;; Defined at:
  3283 ;;		line 30 in file "main.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3297 ;;      Params:         0       0       0       0       0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3300 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3301 ;;Total ram usage:        0 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text18
  3311  001744                     __ptext18:
  3312                           	callstack 0
  3313  001744                     _InitPort:
  3314                           	callstack 30
  3315  001744                     
  3316                           ;main.c: 31:     ADCON1bits.PCFG = 0x0F;
  3317  001744  0E0F               	movlw	15
  3318  001746  12C1               	iorwf	193,f,c	;volatile
  3319  001748                     
  3320                           ;main.c: 32:     TRISC =0xff;
  3321  001748  6894               	setf	148,c	;volatile
  3322  00174A  0012               	return		;funcret
  3323  00174C                     __end_of_InitPort:
  3324                           	callstack 0
  3325                           
  3326                           	psect	rparam
  3327  0000                     
  3328                           	psect	idloc
  3329                           
  3330                           ;Config register IDLOC0 @ 0x200000
  3331                           ;	unspecified, using default values
  3332  200000                     	org	2097152
  3333  200000  FF                 	db	255
  3334                           
  3335                           ;Config register IDLOC1 @ 0x200001
  3336                           ;	unspecified, using default values
  3337  200001                     	org	2097153
  3338  200001  FF                 	db	255
  3339                           
  3340                           ;Config register IDLOC2 @ 0x200002
  3341                           ;	unspecified, using default values
  3342  200002                     	org	2097154
  3343  200002  FF                 	db	255
  3344                           
  3345                           ;Config register IDLOC3 @ 0x200003
  3346                           ;	unspecified, using default values
  3347  200003                     	org	2097155
  3348  200003  FF                 	db	255
  3349                           
  3350                           ;Config register IDLOC4 @ 0x200004
  3351                           ;	unspecified, using default values
  3352  200004                     	org	2097156
  3353  200004  FF                 	db	255
  3354                           
  3355                           ;Config register IDLOC5 @ 0x200005
  3356                           ;	unspecified, using default values
  3357  200005                     	org	2097157
  3358  200005  FF                 	db	255
  3359                           
  3360                           ;Config register IDLOC6 @ 0x200006
  3361                           ;	unspecified, using default values
  3362  200006                     	org	2097158
  3363  200006  FF                 	db	255
  3364                           
  3365                           ;Config register IDLOC7 @ 0x200007
  3366                           ;	unspecified, using default values
  3367  200007                     	org	2097159
  3368  200007  FF                 	db	255
  3369                           
  3370                           	psect	config
  3371                           
  3372                           ;Config register CONFIG1L @ 0x300000
  3373                           ;	PLL Prescaler Selection bits
  3374                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
  3375                           ;	System Clock Postscaler Selection bits
  3376                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3377                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3378                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3379  300000                     	org	3145728
  3380  300000  04                 	db	4
  3381                           
  3382                           ;Config register CONFIG1H @ 0x300001
  3383                           ;	Oscillator Selection bits
  3384                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  3385                           ;	Fail-Safe Clock Monitor Enable bit
  3386                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3387                           ;	Internal/External Oscillator Switchover bit
  3388                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3389  300001                     	org	3145729
  3390  300001  0E                 	db	14
  3391                           
  3392                           ;Config register CONFIG2L @ 0x300002
  3393                           ;	Power-up Timer Enable bit
  3394                           ;	PWRT = ON, PWRT enabled
  3395                           ;	Brown-out Reset Enable bits
  3396                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3397                           ;	Brown-out Reset Voltage bits
  3398                           ;	BORV = 3, Minimum setting 2.05V
  3399                           ;	USB Voltage Regulator Enable bit
  3400                           ;	VREGEN = OFF, USB voltage regulator disabled
  3401  300002                     	org	3145730
  3402  300002  18                 	db	24
  3403                           
  3404                           ;Config register CONFIG2H @ 0x300003
  3405                           ;	Watchdog Timer Enable bit
  3406                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3407                           ;	Watchdog Timer Postscale Select bits
  3408                           ;	WDTPS = 32768, 1:32768
  3409  300003                     	org	3145731
  3410  300003  1E                 	db	30
  3411                           
  3412                           ; Padding undefined space
  3413  300004                     	org	3145732
  3414  300004  FF                 	db	255
  3415                           
  3416                           ;Config register CONFIG3H @ 0x300005
  3417                           ;	CCP2 MUX bit
  3418                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3419                           ;	PORTB A/D Enable bit
  3420                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  3421                           ;	Low-Power Timer 1 Oscillator Enable bit
  3422                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3423                           ;	MCLR Pin Enable bit
  3424                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  3425  300005                     	org	3145733
  3426  300005  03                 	db	3
  3427                           
  3428                           ;Config register CONFIG4L @ 0x300006
  3429                           ;	Stack Full/Underflow Reset Enable bit
  3430                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3431                           ;	Single-Supply ICSP Enable bit
  3432                           ;	LVP = OFF, Single-Supply ICSP disabled
  3433                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3434                           ;	ICPRT = OFF, ICPORT disabled
  3435                           ;	Extended Instruction Set Enable bit
  3436                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3437                           ;	Background Debugger Enable bit
  3438                           ;	DEBUG = 0x1, unprogrammed default
  3439  300006                     	org	3145734
  3440  300006  81                 	db	129
  3441                           
  3442                           ; Padding undefined space
  3443  300007                     	org	3145735
  3444  300007  FF                 	db	255
  3445                           
  3446                           ;Config register CONFIG5L @ 0x300008
  3447                           ;	Code Protection bit
  3448                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3449                           ;	Code Protection bit
  3450                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3451                           ;	Code Protection bit
  3452                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3453                           ;	Code Protection bit
  3454                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3455  300008                     	org	3145736
  3456  300008  0F                 	db	15
  3457                           
  3458                           ;Config register CONFIG5H @ 0x300009
  3459                           ;	Boot Block Code Protection bit
  3460                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3461                           ;	Data EEPROM Code Protection bit
  3462                           ;	CPD = OFF, Data EEPROM is not code-protected
  3463  300009                     	org	3145737
  3464  300009  C0                 	db	192
  3465                           
  3466                           ;Config register CONFIG6L @ 0x30000A
  3467                           ;	Write Protection bit
  3468                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3469                           ;	Write Protection bit
  3470                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3471                           ;	Write Protection bit
  3472                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3473                           ;	Write Protection bit
  3474                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3475  30000A                     	org	3145738
  3476  30000A  0F                 	db	15
  3477                           
  3478                           ;Config register CONFIG6H @ 0x30000B
  3479                           ;	Configuration Register Write Protection bit
  3480                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3481                           ;	Boot Block Write Protection bit
  3482                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3483                           ;	Data EEPROM Write Protection bit
  3484                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3485  30000B                     	org	3145739
  3486  30000B  E0                 	db	224
  3487                           
  3488                           ;Config register CONFIG7L @ 0x30000C
  3489                           ;	Table Read Protection bit
  3490                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3491                           ;	Table Read Protection bit
  3492                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3493                           ;	Table Read Protection bit
  3494                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3495                           ;	Table Read Protection bit
  3496                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3497  30000C                     	org	3145740
  3498  30000C  0F                 	db	15
  3499                           
  3500                           ;Config register CONFIG7H @ 0x30000D
  3501                           ;	Boot Block Table Read Protection bit
  3502                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3503  30000D                     	org	3145741
  3504  30000D  40                 	db	64
  3505                           tosu	equ	0xFFF
  3506                           tosh	equ	0xFFE
  3507                           tosl	equ	0xFFD
  3508                           stkptr	equ	0xFFC
  3509                           pclatu	equ	0xFFB
  3510                           pclath	equ	0xFFA
  3511                           pcl	equ	0xFF9
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           prodh	equ	0xFF4
  3517                           prodl	equ	0xFF3
  3518                           indf0	equ	0xFEF
  3519                           postinc0	equ	0xFEE
  3520                           postdec0	equ	0xFED
  3521                           preinc0	equ	0xFEC
  3522                           plusw0	equ	0xFEB
  3523                           fsr0h	equ	0xFEA
  3524                           fsr0l	equ	0xFE9
  3525                           wreg	equ	0xFE8
  3526                           indf1	equ	0xFE7
  3527                           postinc1	equ	0xFE6
  3528                           postdec1	equ	0xFE5
  3529                           preinc1	equ	0xFE4
  3530                           plusw1	equ	0xFE3
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           bsr	equ	0xFE0
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           preinc2	equ	0xFDC
  3538                           plusw2	equ	0xFDB
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8

Data Sizes:
    Strings     64
    Constant    0
    Data        0
    BSS         62
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     10      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> cont(BANK0[10]), texto(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[6]), STR_4(CODE[12]), STR_3(CODE[6]), STR_2(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[6]), STR_4(CODE[12]), STR_3(CODE[6]), STR_2(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[6]), STR_4(CODE[12]), STR_3(CODE[6]), STR_2(CODE[12]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> cont(BANK0[10]), texto(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S738_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> cont(BANK0[10]), texto(BANK0[10]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> cont(BANK0[10]), texto(BANK0[10]), 

    LCD_Cadena@dato	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), cont(BANK0[10]), texto(BANK0[10]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_gotoXY->_LCD_Comando
    _LCD_Init->_LCD_Comando
    _LCD_Cadena->_LCD_Data

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8523
                                             93 COMRAM     2     2      0
                           _InitPort
                         _LCD_Cadena
                           _LCD_Init
                         _LCD_gotoXY
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6912
                                             87 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoXY                                           5     1      4    1022
                                              2 COMRAM     5     1      4
                        _LCD_Comando
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      44
                                              2 COMRAM     1     1      0
                        _LCD_Comando
 ---------------------------------------------------------------------------------
 (2) _LCD_Comando                                          2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Cadena                                           3     1      2     545
                                              2 COMRAM     3     1      2
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Data                                             2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitPort                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPort
   _LCD_Cadena
     _LCD_Data
   _LCD_Init
     _LCD_Comando
   _LCD_gotoXY
     _LCD_Comando
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      49       5       45.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      20        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Mon Dec 14 09:15:58 2020

                      _i 0068             ?_LCD_Comando 0001                       l33 0C4E  
                     l34 0BAA                       l27 174A                       l37 0CFE  
                     l62 12CE                       l70 16F6                       l39 0C8E  
                     l65 1588                       l76 14CC                       l79 15E0  
                    l209 11F0                      l196 108C                      l800 08EA  
                    l831 1526                      l832 152E                      l760 1632  
                    l825 0F04                      l818 0B22                      l851 1398  
                    l836 16AE                      l862 174C                      l790 1422  
                    l839 16B6                      l792 145E                      l859 1676  
                    l787 13E0                      l868 172C                      l798 08E2  
                    u600 1676                      u601 1672                      u610 1720  
                    u611 171C                      u620 0F18                      u700 10D2  
                    u621 0F14                      u701 10CE                      u630 0F4A  
                    u710 1110                      u631 0F46                      u711 110C  
                    u720 113A                      u560 12E2                      u800 0872  
                    u641 0F74                      u721 1136                      u561 12DE  
                    u801 086C                      u650 0F98                      u730 1168  
                    u570 12F4                      u810 0874                      u651 0F94  
                    u731 1164                      u571 12F0                      u660 0FC2  
                    u740 11B0                      u580 131C                      u900 0A8C  
                    u820 088A                      u661 0FBE                      u741 11AC  
                    u581 1318                      u901 0A88                      u821 0886  
                    u670 1002                      u590 1352                      u750 13AA  
                    u910 0A9C                      u830 08BA                      u671 0FFE  
                    u591 134E                      u751 13A6                      u911 0A98  
                    u831 08B6                      u680 104C                      u760 13CC  
                    u920 0AAE                      u840 08D6                      u681 1048  
                    u761 13C8                      u921 0AAA                      u841 08D2  
                    u690 10A0                      u770 1422                      u930 0ABE  
                    u850 0904                      u691 109C                      u771 141E  
                    u931 0ABA                      u851 0900                      u780 1432  
                    u940 0AD6                      u860 0912                      u781 142E  
                    u941 0AD2                      u861 090E                      u790 1692  
                    u870 0A3A                      u950 0D76                      u791 168E  
                    u871 0A36                      u951 0D72                      u880 0A58  
                    u960 0DBE                      u881 0A54                      u961 0DBA  
                    u890 0A72                      u970 0DE2                      u891 0A6E  
                    u971 0DDE                      u980 0E86                      u981 0E82  
                    u990 1526                      u991 1522              ?_LCD_gotoXY 0003  
                    _abs 1678                      _pad 139A                      wreg 000FE8  
                   ?_abs 0013                     l1400 1024                     l1402 1036  
                   l1404 103C                     l1420 10C4                     l1412 108E  
                   l1340 12F4                     l1500 092E                     l1406 104C  
                   l1430 112C                     l1422 10D2                     l1414 1092  
                   l1342 12FE                     l1350 1634                     l1510 0A3A  
                   l1502 09B0                     l1600 156C                     l1408 106C  
                   l1432 113A                     l1440 11A0                     l1424 10F2  
                   l1416 10A0                     l1344 131C                     l1336 12D0  
                   l1352 1640                     l1360 1704                     l1520 0AAE  
                   l1512 0A58                     l1504 09B6                     l1610 1584  
                   l1602 1574                     l1370 0F0A                     l1442 11B0  
                   l1434 1168                     l1426 1110                     l1418 10C0  
                   l1346 1352                     l1338 12E2                     l1354 1652  
                   l1362 1708                     l1450 13AA                     l1530 0AEA  
                   l1522 0ABE                     l1514 0A72                     l1506 09BC  
                   l1620 15A4                     l1604 157A                     l1700 12A2  
                   l1380 0F6A                     l1372 0F18                     l1444 11D0  
                   l1436 1188                     l1428 1118                     l1356 1656  
                   l1364 1720                     l1460 1400                     l1452 13BE  
                   l1524 0AC4                     l1532 0AFA                     l1516 0A8C  
                   l1508 0A20                     l1540 0D84                     l1630 15BA  
                   l1622 15AE                     l1614 158C                     l1606 157C  
                   l1702 12A8                     l1710 16B8                     l1390 0FB4  
                   l1382 0F6E                     l1374 0F38                     l1438 119A  
                   l1470 1678                     l1358 16F8                     l1462 1404  
                   l1454 13CC                     l1526 0AD6                     l1518 0A9C  
                   l1550 0E2A                     l1542 0D96                     l1640 15D2  
                   l1632 15C0                     l1624 15B0                     l1616 159C  
                   l1720 1460                     l1608 1582                     l1704 12B8  
                   l1712 16C8                     l1392 0FC2                     l1384 0F7A  
                   l1376 0F3C                     l1368 0F06                     l1472 1692  
                   l1464 1432                     l1456 13D8                     l1448 139A  
                   l1528 0AE2                     l1480 08AA                     l1560 0EA8  
                   l1544 0D9A                     l1536 0D52                     l1800 0D3E  
                   l1642 15D4                     l1634 15C2                     l1626 15B2  
                   l1618 15A0                     l1722 1464                     l1706 12BE  
                   l1714 16E2                     l1394 0FD4                     l1386 0F98  
                   l1378 0F4A                     l1466 1446                     l1458 13EC  
                   l1490 0904                     l1482 08BA                     l1474 0842  
                   l1554 0E62                     l1546 0DBE                     l1538 0D76  
                   l1570 0ECE                     l1650 14CE                     l1730 15E2  
                   l1660 1748                     l1644 15DA                     l1636 15C6  
                   l1628 15B8                     l1724 1474                     l1580 1542  
                   l1716 16EE                     l1396 1002                     l1388 0FA0  
                   l1492 0912                     l1484 08BC                     l1476 0862  
                   l1572 0EF2                     l1556 0E86                     l1564 0EB4  
                   l1548 0DE2                     l1652 14D6                     l1732 15F4  
                   l1646 15DC                     l1638 15CC                     l1726 1498  
                   l1590 1558                     l1582 1546                     l1670 1204  
                   l1662 11F2                     l1398 1022                     l1494 0918  
                   l1486 08D6                     l1478 088A                     l1566 0EC2  
                   l1558 0E94                     l1654 14E4                     l1734 15FC  
                   l1750 0B46                     l1742 0B24                     l1728 149C  
                   l1592 155E                     l1584 154A                     l1680 1232  
                   l1672 1206                     l1664 11F8                     l1496 0920  
                   l1488 08F2                     l1656 150A                     l1736 1604  
                   l1760 0BB8                     l1752 0B52                     l1744 0B2A  
                   l1658 1744                     l1594 1560                     l1586 1554  
                   l1578 1532                     l1690 1266                     l1682 123A  
                   l1674 1216                     l1666 1200                     l1498 0928  
                   l1738 1620                     l1770 0C14                     l1762 0BD2  
                   l1754 0B68                     l1746 0B2E                     l1596 1566  
                   l1588 1556                     l1692 1276                     l1684 1240  
                   l1676 121C                     l1668 1202                     l1780 0C9C  
                   l1772 0C28                     l1764 0BE6                     l1756 0B76  
                   l1748 0B32                     l1598 1568                     l1694 127C  
                   l1686 1250                     l1678 122C                     l1782 0CB6  
                   l1774 0C34                     l1766 0BF2                     l1758 0B94  
                   l1696 128C                     l1688 1260                     l1784 0CCA  
                   l1776 0C5C                     l1768 0BF8                     l1698 1292  
                   l1786 0CD6                     l1778 0C78                     l1796 0D14  
                   l1788 0CDE                     l1798 0D2A                     ?_pad 0011  
                   STR_1 0812                     STR_2 082F                     STR_3 083B  
                   STR_4 0823                     STR_5 083B                     STR_6 0801  
                   u1000 16E2                     u1001 16DE                     u1010 1494  
                   u1020 14BC                     u1100 0D14                     u1101 0D10  
                   u1030 14CC                     u1031 14C8                     u1040 0B76  
                   u1017 148A                     u1041 0B72                     u1050 0B94  
                   u1027 14B2                     u1051 0B90                     u1060 0BB8  
                   u1061 0BB4                     u1117 0B5C                     u1070 0C5C  
                   u1207 1246                     u1071 0C58                     u1127 0B9E  
                   u1080 0C78                     u1217 1256                     u1081 0C74  
                   u1137 0C3E                     u1090 0C9C                     u1307 1576  
                   u1227 126C                     u1091 0C98                     u1147 0C82  
                   u1317 157E                     u1237 1282                     u1157 0D1E  
                   u1327 146A                     u1247 1298                     u1167 16BE  
                   u1337 1592                     u1257 12AE                     u1177 120C  
                   u1347 15B4                     u1267 12C4                     u1187 1222  
                   u1357 15BC                     u1277 1538                     u1197 1234  
                   u1367 15CE                     u1287 155A                     u1377 15D6  
                   u1297 1562                     _cod1 00A8                     abs@a 0013  
                   _dbuf 006A                     _cont 008A                     _main 0B24  
                   _dtoa 0842                     _prec 0064                     _nout 0060  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017         __end_of_LCD_Data 15E2         __end_of_LCD_Init 12D0  
           LCD_Data@data 0002          __end_of___aodiv 108E                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 11F2             vfpfcnvrt@fmt 0042  
                  _PORTD 000F83                    _TRISC 000F94                    _TRISD 000F95  
    __size_of_LCD_Cadena 006E                    _flags 0066                    _fputc 12D0  
                  _fputs 1634                    pad@fp 0011                    _width 0062  
                  _texto 0094                    _putch 174C                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1634      __size_of_LCD_gotoXY 0040  
        __initialization 172E              LCD_gotoXY@x 0003              LCD_gotoXY@y 0005  
           __end_of_main 0D52             __end_of_dtoa 0B24         __end_of_InitPort 174C  
                 ??_main 005E                   ??_dtoa 0026            __activetblptr 000002  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
           vfprintf@cfmt 0056                ??___aodiv 0011                ??___aomod 0011  
                 clear_0 1734                   pad@buf 0013     __size_of_LCD_Comando 005A  
                 dtoa@fp 001C                   _strlen 16F8                   fputc@c 0001  
                 fputs@c 000E                   fputs@i 000F                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 1530  
              ??_sprintf 005E                ?_LCD_Data 0001               __accesstop 0060  
__end_of__initialization 173A                ?_LCD_Init 0001            ___rparam_used 000001  
           ??_LCD_Cadena 0005           __pcstackCOMRAM 0001            __end_of_fputc 139A  
          __end_of_fputs 1678            __end_of_putch 174E           LCD_Cadena@dato 0003  
           ??_LCD_gotoXY 0007                  ??_fputc 0005                  ??_fputs 000E  
     __end_of_LCD_Cadena 14CE                  ??_putch 0001               __pbssBANK0 0060  
             ??_LCD_Data 0001                ?_InitPort 0001               ??_LCD_Init 0003  
     __end_of_LCD_gotoXY 16F8                  ?_strlen 0001       __size_of_vfpfcnvrt 01B4  
             ??_InitPort 0001                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0F06                  ___aomod 108E                ?_vfprintf 0050  
           __psmallconst 0800                  __pcinit 172E                  __ramtop 0800  
                __ptext0 0B24                  __ptext1 15E2                  __ptext2 14CE  
                __ptext3 0D52                  __ptext4 0842                  __ptext5 139A  
                __ptext6 16F8                  __ptext7 1634                  __ptext8 12D0  
                __ptext9 174C          __size_of_strlen 0036             __size_of_abs 0040  
           __size_of_pad 00C6           LCD_Comando@cmd 0002                  _sprintf 15E2  
   end_of_initialization 173A                  fputc@fp 0003            __Lmediumconst 0000  
                fputs@fp 000C        __end_of_vfpfcnvrt 0F06                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0056                  strlen@a 0003                  strlen@s 0001  
              _PORTCbits 000F82                _TRISDbits 000F95        __size_of_LCD_Data 0058  
      __size_of_LCD_Init 00DE            ??_LCD_Comando 0001              vfpfcnvrt@ap 0044  
            vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048           __end_of_strlen 172E  
    start_initialization 172E              __end_of_abs 16B8              __end_of_pad 1460  
      __size_of_InitPort 0008              vfprintf@fmt 0052                 ??_strlen 0003  
    __end_of_LCD_Comando 158A            __pcstackBANK0 009E         ___aodiv@dividend 0001  
              __pnvBANK0 00A8                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013        __size_of_vfprintf 0062              __smallconst 0800  
               ?_sprintf 0058           __size_of_fputc 00CA           __size_of_fputs 0044  
         __size_of_putch 0002                 _LCD_Data 158A                 _LCD_Init 11F2  
               _LATDbits 000F8C              _LCD_Comando 1530                _vfpfcnvrt 0D52  
             _ADCON1bits 000FC1                 _InitPort 1744                 __Hrparam 0000  
             vfprintf@ap 0054                 __Lrparam 0000               vfprintf@fp 0050  
       __size_of___aodiv 0188         __size_of___aomod 0164               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
               _dtoa$811 002E                 __ptext10 1678                 __ptext11 108E  
               __ptext12 0F06                 __ptext13 16B8                 __ptext14 11F2  
               __ptext15 1530                 __ptext16 1460                 __ptext17 158A  
               __ptext18 1744         __size_of_sprintf 0052            __size_of_main 022E  
          __size_of_dtoa 02E2               _LCD_Cadena 1460                 _vfprintf 14CE  
       ___aomod@dividend 0001               _LCD_gotoXY 16B8                sprintf@ap 00A0  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
               sprintf@f 00A2                 sprintf@s 0058             ___aodiv@sign 0012  
           ___aomod@sign 0012              ?_LCD_Cadena 0003  
